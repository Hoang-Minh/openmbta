http://groups.google.com/group/massdotdevelopers/browse_thread/thread/38d8b5b551353f1d#

lots of routes have no trips when trips with outdated services are delete
473 obsolete routes; 610 active ones

Deleted obsolete routes

Problems with handling a Mysql Time type in Rails. Best discussion:
http://www.rebeccablyth.co.uk/2008/01/03/time-columns-and-rails/


- derive the date and schedule_type (weekday, saturday, sunday) from any date,
  and determine if there is a holiday trip for that date on a route.

x = BusRoute.new(1).directions(:date => "10/3/2009", :schedule_type=>'saturday').first
=> <RouteDirection: Dudley Station via Mass. Ave. (97 trips)>
>> x.arrival_times(5)
Massachusetts Ave @ Bay St
- > times listed are accurate

- found out that Rails doesn't save the mysql TIME fields if they are great
  than 24:00:00 (representing hours after 12 midnight, which is necessary for
  late runs). Fixing this by rewriting the Stopping.populate task to insert rows
  into the MySQL database using raw MySQL INSERT commands.

- bus route 8 is complicated

- bus route 8 has 4 distinct routes (not 8) because of the way the grid looks

=> nil
>> pp BusRoute.new(8).directions(:date => "10/3/2009", :schedule_type=>'saturday').size
4

- therefore, I have o change the way the RouteDirection stations and arrival
  times are calculated !

  At least I know what's going on here now.

  >> pp BusRoute.new(8).directions(:date => "10/3/2009", :schedule_type=>'saturday')
  
  [<RouteDirection: Harbor Point via UMass (5 trips)>,
  <RouteDirection: Kenmore Station via Ruggles Station & Longwood (5 trips)>,
  <RouteDirection: Harbor Point via UMass & South Bay Center (20 trips)>,
  <RouteDirection: Kenmore Station via South Bay Center & Ruggles Station (19
  trips)>]
  
- Memu structure

  Transport Type
    Super Routes
      SubRoutes / Routes - show name in cell plus start and end points & num
      stops & num trips
        Trips by start/end
          Each trip stops and arrival times
        Stops in position order 
          drill down to each stop
            Each Stop all arrival times of all trips of all subroutes in order of
            time
              - no directionality
              - just list next to time the trip headsign
              - selecting an arrival drills down to the itinerary (stoppings) for
                that trip
        All stops on map? [How do you work with google maps in the iPhone?]
          Same stop detail as above
          - use MapKit on iphone
  Bookmarks
    - superroutes
    - routes
    - trips
    - route stops
  Modal: pick date and/or type of service


I now have all the methods necessary for this.

- Build a Rails app to see the data and check against MBTA, then build JSON API
  and iPhone client


RAILS OR SINATRA?

Use Rails, because then I can put up normal webpages for iPhone app support.
Also, webpage versions of each API resource allow for easier testing and
checking of the reliability of the data.


COMMUTER RAIL:

- There are no short_names, use the routes.mbta_id

mysql> select * from routes where route_type = 2;

+------+----------------+------------+-----------+------------+
| id   | mbta_id        | short_name | long_name | route_type |
+------+----------------+------------+-----------+------------+
| 1063 | CR-Fairmount   |            |           |          2 |
| 1064 | CR-Fitchburg   |            |           |          2 |
| 1065 | CR-Worcester   |            |           |          2 |
| 1066 | CR-Franklin    |            |           |          2 |
| 1067 | CR-Greenbush   |            |           |          2 |
| 1068 | CR-Haverhill   |            |           |          2 |
| 1069 | CR-OldColony   |            |           |          2 |
| 1070 | CR-Lowell      |            |           |          2 |
| 1071 | CR-Needham     |            |           |          2 |
| 1072 | CR-Newburyport |            |           |          2 |
| 1073 | CR-Providence  |            |           |          2 |
+------+----------------+------------+-----------+------------+
11 rows in set (0.09 sec)

SUBWAY

- the routes table is opqaue on the names

mysql> select * from routes where route_type in (0,1);
+------+-----------+------------+-----------+------------+
| id   | mbta_id   | short_name | long_name | route_type |
+------+-----------+------------+-----------+------------+
|  957 | 810_-1058 |            |           |          0 |
|  959 | 811_-1058 |            |           |          0 |
|  961 | 812_-1058 |            |           |          0 |
|  963 | 822_-1058 |            |           |          0 |
|  965 | 830_-1058 |            |           |          0 |
|  967 | 831_-1058 |            |           |          0 |
|  978 | 852_-1058 |            |           |          0 |
|  992 | 880_-1058 |            |           |          0 |
|  994 | 881_-1058 |            |           |          0 |
| 1007 | 899_-1058 |            |           |          0 |
| 1011 | 903_-1058 |            |           |          1 |
| 1017 | 913_-1058 |            |           |          1 |
| 1027 | 931_-1058 |            |           |          1 |
| 1033 | 933_-1058 |            |           |          1 |
| 1039 | 946_-1058 |            |           |          1 |
| 1041 | 948_-1058 |            |           |          1 |
| 1083 | 9462-1056 |            |           |          1 |
+------+-----------+------------+-----------+------------+
17 rows in set (0.00 sec)

- So use the headsigns on the trips

mysql> select headsign, first_stop, last_stop from trips where route_id = 959;
+--------------------+------------------------------------+-------------------------------------+
| headsign           | first_stop                         | last_stop                           |
+--------------------+------------------------------------+-------------------------------------+
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| B - Boston College | North Station - Green Line Inbound | Boston College Station - Green Line |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
| North Station      | Boston College Station - Inbound   | North Station - Green Line Outbound |
+--------------------+------------------------------------+-------------------------------------+
20 rows in set (0.00 sec)


mysql> select routes.id, routes.mbta_id, headsign, first_stop, last_stop, count(trips.id) from trips inner join routes on trips.route_id = routes.id and routes.route_type in (0, 1) group by routes.id;
+------+-----------+----------------------+--------------------------------------------------+--------------------------------------------------+-----------------+
| id   | mbta_id   | headsign             | first_stop                                       | last_stop                                        | count(trips.id) |
+------+-----------+----------------------+--------------------------------------------------+--------------------------------------------------+-----------------+
|  957 | 810_-1058 | B - Boston College   | Lechmere - Green Line Inbound                    | Boston College Station - Green Line              |              12 |
|  959 | 811_-1058 | B - Boston College   | North Station - Green Line Inbound               | Boston College Station - Green Line              |              20 |
|  961 | 812_-1058 | B - Boston College   | Government Center Station - Green Line Westbound | Boston College Station - Green Line              |            2298 |
|  963 | 822_-1058 | Government Center    | Chestnut Hill Ave - Inbound                      | Government Center Station - Green Line Eastbound |              18 |
|  965 | 830_-1058 | C - Cleveland Circle | Lechmere - Green Line Inbound                    | Cleveland Circle Platform                        |              39 |
|  967 | 831_-1058 | C - Cleveland Circle | North Station - Green Line Inbound               | Cleveland Circle Platform                        |            2041 |
|  978 | 852_-1058 | D - Riverside        | Government Center Station - Green Line Westbound | Riverside Station - Green Line                   |            2082 |
|  992 | 880_-1058 | E - Heath Street     | Lechmere - Green Line Inbound                    | Heath St Platform - Green Line E                 |            2129 |
|  994 | 881_-1058 | E - Heath Street     | North Station - Green Line Inbound               | Heath St Platform - Green Line E                 |              23 |
| 1007 | 899_-1058 | Ashmont              | Mattapan Station - Eastbound                     | Ashmont Station - Eastbound                      |            1888 |
| 1011 | 903_-1058 | Forest Hills         | Oak Grove Station - Orange Line                  | Forest Hills Orange Line                         |            1538 |
| 1017 | 913_-1058 | Forest Hills         | Wellington Station - Inbound                     | Forest Hills Orange Line                         |              14 |
| 1027 | 931_-1058 | Alewife              | Ashmont Station Red Line Inbound                 | Alewife Station Red Line                         |            1192 |
| 1033 | 933_-1058 | Alewife              | Braintree Station Red Line Platform              | Alewife Station Red Line                         |            1180 |
| 1039 | 946_-1058 | Bowdoin              | Wonderland Station -  Blue Line                  | Bowdoin Station Blue Line                        |             534 |
| 1041 | 948_-1058 | Bowdoin              | Orient Heigts Station - Inbound                  | Bowdoin Station Blue Line                        |              14 |
| 1083 | 9462-1056 | Bowdoin              | Wonderland Station -  Blue Line                  | Government Center Station - to Bowdoin Staion    |             557 |
+------+-----------+----------------------+--------------------------------------------------+--------------------------------------------------+-----------------+
17 rows in set (0.05 sec)

mysql> select routes.id, routes.mbta_id, headsign, first_stop, last_stop, count(trips.id) from trips inner join routes on trips.route_id = routes.id and routes.route_type in (0, 1) group by routes.id, trips.headsign;
+------+-----------+----------------------+--------------------------------------------------+--------------------------------------------------+-----------------+
| id   | mbta_id   | headsign             | first_stop                                       | last_stop                                        | count(trips.id) |
+------+-----------+----------------------+--------------------------------------------------+--------------------------------------------------+-----------------+
|  957 | 810_-1058 | B - Boston College   | Lechmere - Green Line Inbound                    | Boston College Station - Green Line              |               6 |
|  957 | 810_-1058 | Lechmere             | Boston College Station - Inbound                 | Lechmere - Green Line                            |               6 |
|  959 | 811_-1058 | B - Boston College   | North Station - Green Line Inbound               | Boston College Station - Green Line              |              10 |
|  959 | 811_-1058 | North Station        | Boston College Station - Inbound                 | North Station - Green Line Outbound              |              10 |
|  961 | 812_-1058 | B - Boston College   | Government Center Station - Green Line Westbound | Boston College Station - Green Line              |            1158 |
|  961 | 812_-1058 | Government Center    | Boston College Station - Inbound                 | Government Center Station - Green Line Eastbound |            1140 |
|  963 | 822_-1058 | Government Center    | Chestnut Hill Ave - Inbound                      | Government Center Station - Green Line Eastbound |              18 |
|  965 | 830_-1058 | C - Cleveland Circle | Lechmere - Green Line Inbound                    | Cleveland Circle Platform                        |              18 |
|  965 | 830_-1058 | Lechmere             | Cleveland Circle Platform - Inbound              | Lechmere - Green Line                            |              21 |
|  967 | 831_-1058 | C - Cleveland Circle | North Station - Green Line Inbound               | Cleveland Circle Platform                        |            1022 |
|  967 | 831_-1058 | North Station        | Cleveland Circle Platform - Inbound              | North Station - Green Line Outbound              |            1019 |
|  978 | 852_-1058 | D - Riverside        | Government Center Station - Green Line Westbound | Riverside Station - Green Line                   |            1041 |
|  978 | 852_-1058 | Government Center    | Riverside Station - Inbound                      | Government Center Station - Green Line Eastbound |            1041 |
|  992 | 880_-1058 | E - Heath Street     | Lechmere - Green Line Inbound                    | Heath St Platform - Green Line E                 |            1070 |
|  992 | 880_-1058 | Lechmere             | Heath St Platform - Green Line E                 | Lechmere - Green Line                            |            1059 |
|  994 | 881_-1058 | E - Heath Street     | North Station - Green Line Inbound               | Heath St Platform - Green Line E                 |              10 |
|  994 | 881_-1058 | North Station        | Heath St Platform - Green Line E                 | North Station - Green Line Outbound              |              13 |
| 1007 | 899_-1058 | Ashmont              | Mattapan Station - Eastbound                     | Ashmont Station - Eastbound                      |             944 |
| 1007 | 899_-1058 | Mattapan             | Ashmont Station - Westbound                      | Mattapan Station - Westbound                     |             944 |
| 1011 | 903_-1058 | Forest Hills         | Oak Grove Station - Orange Line                  | Forest Hills Orange Line                         |             762 |
| 1011 | 903_-1058 | Oak Grove            | Forest Hills Orange Line                         | Oak Grove Station - Orange Line                  |             776 |
| 1017 | 913_-1058 | Forest Hills         | Wellington Station - Inbound                     | Forest Hills Orange Line                         |              14 |
| 1027 | 931_-1058 | Alewife              | Ashmont Station Red Line Inbound                 | Alewife Station Red Line                         |             596 |
| 1027 | 931_-1058 | Ashmont              | Alewife Station Red Line                         | Ashmont Station - Red Line                       |             596 |
| 1033 | 933_-1058 | Alewife              | Braintree Station Red Line Platform              | Alewife Station Red Line                         |             589 |
| 1033 | 933_-1058 | Braintree            | Alewife Station Red Line                         | Braintree Station Red Line Platform              |             591 |
| 1039 | 946_-1058 | Bowdoin              | Wonderland Station -  Blue Line                  | Bowdoin Station Blue Line                        |             260 |
| 1039 | 946_-1058 | Wonderland           | Bowdoin Station Blue Line                        | Wonderland Station -  Blue Line                  |             274 |
| 1041 | 948_-1058 | Bowdoin              | Orient Heigts Station - Inbound                  | Bowdoin Station Blue Line                        |              14 |
| 1083 | 9462-1056 | Bowdoin              | Wonderland Station -  Blue Line                  | Government Center Station - to Bowdoin Staion    |             278 |
| 1083 | 9462-1056 | Wonderland           | Government Ctr Station - to Wonderland           | Wonderland Station -  Blue Line                  |             279 |
+------+-----------+----------------------+--------------------------------------------------+--------------------------------------------------+-----------------+
31 rows in set (0.06 sec)


Try this

select routes.id, routes.mbta_id, headsign, first_stop, last_stop, count(trips.id) from trips inner join routes on trips.route_id = routes.id and routes.route_type in (3) group by routes.id, trips.headsign;

See bus-headsigns.txt

- Google maps 3
- Open Street Map
  - CloudMade
  - http://developers.cloudmade.com/projects/show/iphone-api

iPhone MapKit

http://developer.apple.com/iphone/library/documentation/MapKit/Reference/MapKit_Framework_Reference/

iphonembta.org purchased from godaddy for $10.17 for 1 year. See if MBTA takes it from me. In the meantime, serve out from instantwatcher.com

I'm committed now to making this app a server client.

----

rethink: 

1. select all the stops from a map -> this is easier to order by location on a
map than by some complicated algorithm that orders and aggregates by position. 

- start stop, end stop

- this eliminates the concept of inbound and outbound

- but maybe it's possible to order by lat lng distance from one of the ends?

So for a headsign and superroute, show a map of all stops

2. select a stop, then in drill down for each stop, show ALL arrival times of all lines in order of time.

3. OR, user can choose starting point and destination from a map, and the app can calculate
all trips.

Anomaly in Bus Route 66

66 DUDLEY STA VIA ALLSTON : Weekday Effective 09/05/09
- weird overlaps between differing routes that start at different points


More map integration. Very useful to show T stops along with Bus Stops.

Can show stop names and stop times on map. The question is how to move through
time and select different sub routes.


- Simpler nav

To simplify, make specific classes and tables for bus routes, subway, commuter
rail.

Simple map for each route (one headsign and set of ordered stops) 

On trips page showing stops per trip in a route, show next 4? arrival times per
stop. This reduces the number of levels user has to drill down.

Geolocate to find out which stop user is closest to!!

Make it completely dynamic. Take current date and time, and even location.
But for testing, allow these to be set manually in URL parameters.

So for a given route/line, pass in date, time, return next 2 or 3 stop times for
all stops on route/line.

So for a given route/headsign, we want a set of imminent stoppings/trips
with that headsign for each stop. Thus we need to know relevant date/schedule
type and TIME of day.

---
Mon Oct  5 07:10:25 EDT 2009

Resolved today: keep it simple. For buses, pick a route name, then show all
available headsigns. Sort headsigns by direction by using lat and lng of first
stop. Select a headsign, then show map or list (alternatives) of all the stops
in order. On the map, put pins with numbers indication the position order of the
stop.

Worked 4 hours so far since early morning on the PRX API. Just starting the Ruby
client gem. Time to take a break for an hour or more from typing. 

The plan today is to finish the Ruby gem for PRX, which finishes my PRX work for
now, and to work on the MBTA app. I hope I can finish that by Wednesday, then I
can turn to my outliner project.


---
Wed Oct  7 15:10:07 EDT 2009

Tried to import that whole dataset to sqlite3 but the size was getting well over
67MB. Too big. Need to keep all the trip, stopping, and stops data on the
server.


First step is to discover all active services, after eliminated the ones removed
by calendar_dates.txt

> Service.active_on("20091012").map {|x| x.id}.sort
presumed: [13, 15, 21, 27, 33, 50, 52, 58, 64, 70, 87, 114, 132, 140, 148, 158, 162, 169, 170]
removed: [20, 24, 32, 35, 55, 63, 67, 73, 90, 102, 109, 117, 135, 143, 151, 171]
added: [15, 21, 27, 33, 52, 58, 64, 70, 87, 114, 132, 140, 148, 170]
=> [13, 15, 15, 21, 21, 27, 27, 33, 33, 50, 52, 52, 58, 58, 64, 64, 70, 70, 87, 87, 114, 114, 132, 132, 140, 140, 148, 148, 158, 162, 169, 170, 170]
>> Service.active_on("20091012").map {|x| x.id}.sort
presumed: [13, 15, 21, 27, 33, 50, 52, 58, 64, 70, 87, 114, 132, 140, 148, 158, 162, 169, 170]
removed: [20, 24, 32, 35, 55, 63, 67, 73, 90, 102, 109, 117, 135, 143, 151, 171]
added: [15, 21, 27, 33, 52, 58, 64, 70, 87, 114, 132, 140, 148, 170]
=> [13, 15, 15, 21, 21, 27, 27, 33, 33, 50, 52, 52, 58, 58, 64, 64, 70, 70, 87, 87, 114, 114, 132, 132, 140, 140, 148, 148, 158, 162, 169, 170, 170]
>> reload!
Reloading...
=> true
>> Service.active_on("20091012").map {|x| x.id}.sort
=> [13, 15, 21, 27, 33, 50, 52, 58, 64, 70, 87, 114, 132, 140, 148, 158, 162, 169, 170]
>> 
?> 


This is the command to use now:

>> Service.active_on("20091012").map {|x| x.id}.sort

Get all trips for a route_id, headsign, and date:

Trip.for(:route_id => 2, :headsign => "Dudley Station via Mass. Ave.", :date => "20091007").sort.each {|t| puts "#{t.start_time}, #{t.end_time}"}; nil
=> 05:10:00, 05:35:00
05:30:00, 05:55:00
05:50:00, 06:15:00
06:06:00, 06:31:00
06:21:00, 06:46:00
06:35:00, 07:00:00
06:47:00, 07:16:00
06:55:00, 07:28:00
...

Seems accurate!


Start building the first Rails API actions and iPhone views

>> Route.subgrouped_by_headsign.each  {|r| puts [r.short_name, r.headsign, r.mbta_id].inspect}; nil

There are cases like this

["325", "Haymarket via I-93", "325_-1058"]
["325", "Haymarket via I-93", "3251-1058"]

Same headsign and short_name. 
Try this

Trip.for(:route_mbta_id => "325_-1058", :headsign => "Dudley Station via Mass. Ave.", :date => "20091007").sort.each {|t| puts "#{t.start_time}, #{t.end_time}"}; nil
Trip.for(:route_mbta_id => "3251-1058", :headsign => "Dudley Station via Mass. Ave.", :date => "20091007").sort.each {|t| puts "#{t.start_time}, #{t.end_time}"}; nil

=> Both of thse produce nil

route:
/:transport_type/route_headsigns/

>> Route.subgrouped_by_headsign.commuter_rail.each  {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil
[" ", "Alewife", "931_-1058"]
[" ", "Alewife", "933_-1058"]
[" ", "Ashmont", "899_-1058"]
[" ", "Ashmont", "931_-1058"]
[" ", "B - Boston College", "810_-1058"]
[" ", "B - Boston College", "811_-1058"]
[" ", "B - Boston College", "812_-1058"]
[" ", "Bowdoin", "946_-1058"]
[" ", "Bowdoin", "948_-1058"]
[" ", "Bowdoin", "9462-1056"]
[" ", "Braintree", "933_-1058"]
[" ", "C - Cleveland Circle", "830_-1058"]
[" ", "C - Cleveland Circle", "831_-1058"]
[" ", "D - Riverside", "852_-1058"]
[" ", "E - Heath Street", "880_-1058"]
[" ", "E - Heath Street", "881_-1058"]
[" ", "Forest Hills", "903_-1058"]
[" ", "Forest Hills", "913_-1058"]
[" ", "Government Center", "812_-1058"]
[" ", "Government Center", "822_-1058"]
[" ", "Government Center", "852_-1058"]
[" ", "Lechmere", "810_-1058"]
[" ", "Lechmere", "880_-1058"]
[" ", "Lechmere", "830_-1058"]
[" ", "Mattapan", "899_-1058"]
[" ", "North Station", "811_-1058"]
[" ", "North Station", "881_-1058"]
[" ", "North Station", "831_-1058"]
[" ", "Oak Grove", "903_-1058"]
[" ", "Wonderland", "946_-1058"]
[" ", "Wonderland", "9462-1056"]
=> nil
>

The problem is that a Route can have two headsigns, as in the number one bus.
But a common headsign can be shared by 2 or more Routes. I'm not sure why this is sometimes the case.
One possibility is that these routes are effective on mutually exclusive dates.

How can we test this hypothesis?

1. find all cases of this with Ruby

require 'pp'
Route.subgrouped_by_headsign.bus.group_by {|r| r.headsign}.select {|headsign, routes| routes.size > 1}
=>
[["Fields Corner via Adams St.",
  [#<Route id: 237, mbta_id: "201_-1058", short_name: "201", long_name: "201", route_type: 3>,
   #<Route id: 243, mbta_id: "2018-1058", short_name: "201", long_name: "201", route_type: 3>,
   #<Route id: 245, mbta_id: "2019-1058", short_name: "201", long_name: "201", route_type: 3>]],
 ["Harvard Square",
  [#<Route id: 982, mbta_id: "868-1058", short_name: "86", long_name: "86", route_type: 3>,
   #<Route id: 984, mbta_id: "869-1058", short_name: "86", long_name: "86", route_type: 3>]],
 ["Washington at Kneeland",
  [#<Route id: 428, mbta_id: "2753-1058", short_name: "275", long_name: "275", route_type: 3>,
   #<Route id: 432, mbta_id: "2758-1058", short_name: "275", long_name: "275", route_type: 3>]],

Route.subgrouped_by_headsign.bus.group_by {|r| r.headsign}.select {|headsign, routes| routes.size > 1}.size
=> 187


Not easy to do this analysis. Maybe I should just use list unique route_id and headsigns when there
are both.

For subway, there are few items for the 1st navigation level but there is the same anomaly: e.g.,

Route.subgrouped_by_headsign.commuter_rail.each  {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil
[" ", "Lechmere", "810_-1058", 957]
[" ", "Lechmere", "880_-1058", 992]
[" ", "Lechmere", "830_-1058", 965]


The rule should be, rake the route MBTA id + the headsign, and deal with two cases

1. There is one route, but two or more headsigns of the route. In this case we
just take a subgroup of the route's trips for the next level of navigation.

2. There is one headsign shared by multiple distinct routes. E.g., Lechmere. In
this case, let's take as parameters the headsign and a comma separated string of
all the matching routes. 

E.g, 810_-1058,880_-1058,830_-1058

Then we find all the trips associated with this route, and see what their
headsigns are:

Trip.for(:route_id => [957,992,965], :headsign => "Lechmere", :date => "20091007").sort.each {|t| puts "#{t.headsign} #{t.start_time}, #{t.end_time}"}; nil

This produces trips with different routes:
>> Trip.for(:route_id => [957,992,965], :headsign => "Lechmere", :date => "20091007").sort.each {|t| puts "#{t.headsign} #{t.start_time}, #{t.end_time} [#{t.route_id}]"}; nil

It seems they don't overlap:
Lechmere 05:01:00, 05:35:00 [965]
Lechmere 05:10:00, 05:44:00 [965] <--
Lechmere 05:30:00, 05:57:00 [992]
Lechmere 05:40:00, 06:07:00 [992]
Lechmere 05:50:00, 06:18:00 [992]
...
Lechmere 07:20:00, 07:55:00 [992]
Lechmere 07:24:00, 07:59:00 [992] 
Lechmere 07:25:00, 08:13:00 [965] <--
Lechmere 07:28:00, 08:03:00 [992]
Lechmere 07:36:00, 08:11:00 [992]


>> Trip.for(:route_id => [957,992,965], :headsign => "Lechmere", :date => "20091007").sort.each {|t| puts "#{t.headsign} #{t.start_time}, #{t.end_time} [#{t.route_id}] #{t.num_stops} stops"}; nil
Lechmere 07:24:00, 07:59:00 [992] 20 stops
Lechmere 07:25:00, 08:13:00 [965] 24 stops <- number of stops is different
Lechmere 07:28:00, 08:03:00 [992] 20 stops


Route.subgrouped_by_headsign.bus.each  {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil

Let's try this case:

["7", "City Point via Summer St.", "077-1058", 18]
["7", "City Point via Summer St.", "071-1058", 10]
["7", "City Point via Summer St.", "072-1058", 12]
["7", "City Point via Summer St. & Harbor Industrial Park", "074-1058", 16]
["7", "Downtown via Summer St.", "071-1058", 10]
["7", "Downtown via Summer St. & Harbor Industrial Park", "073-1058", 14]

>> Trip.for(:route_id => [18,10,12], :headsign => "City Point via Summer St.", :date => "20091007").sort.each {|t| puts "#{t.headsign} #{t.start_time}, #{t.end_time} [#{t.route_id}]"}; nil

Interesting result:

City Point via Summer St. 05:40:00, 05:56:00 [10] <--
City Point via Summer St. 06:01:00, 06:15:00 [12]
City Point via Summer St. 06:17:00, 06:31:00 [12]
City Point via Summer St. 06:36:00, 06:50:00 [12]
City Point via Summer St. 06:44:00, 06:58:00 [12]
City Point via Summer St. 07:00:00, 07:14:00 [12]
City Point via Summer St. 07:19:00, 07:33:00 [18] <-- *
City Point via Summer St. 07:19:00, 07:33:00 [12]
City Point via Summer St. 07:29:00, 07:43:00 [12]
City Point via Summer St. 07:29:00, 07:43:00 [18] <-- *
City Point via Summer St. 07:38:00, 07:52:00 [12]
City Point via Summer St. 07:44:00, 07:58:00 [18] <--
City Point via Summer St. 07:47:00, 08:01:00 [12]
City Point via Summer St. 07:51:00, 08:05:00 [18] <--
City Point via Summer St. 07:56:00, 08:09:00 [12]
City Point via Summer St. 08:06:00, 08:19:00 [12]
City Point via Summer St. 08:07:00, 08:20:00 [18] <--
City Point via Summer St. 08:16:00, 08:29:00 [18] <--
City Point via Summer St. 08:16:00, 08:29:00 [12]
City Point via Summer St. 08:27:00, 08:40:00 [12]

There's overlap on the starred cases.

Let's see if they differ in number of stops:

>> Trip.for(:route_id => [18,10,12], :headsign => "City Point via Summer St.", :date => "20091007").sort.each {|t| puts "#{t.headsign} [#{t.route_id}] #{t.num_stops} stops"}; nil
City Point via Summer St. [10] 19 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [18] 11 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [12] 10 stops
City Point via Summer St. [18] 11 stops

The trip on route 10 has 19 stops always.
The trip on route 12 has 10 stops.
The trip on route 18 has 11 stops.
All have the same headsign and route short name (short_name = "7").

OK now we know more characteristics of this data.

Let's see how much the stops overlap:

>> Trip.for(:route_id => [18,10,12], :headsign => "City Point via Summer St.", :date => "20091007").sort.                                                                                                            
each {|t| puts "#{t.headsign} [#{t.route_id}] #{t.num_stops} stops\n#{t.stoppings.sort_by {|s| s.position}.map {|s| s.stop_id}.sort.join(', ')}"}; nil

City Point via Summer St. [10] 19 stops
88, 89, 1058, 1464, 1855, 1884, 2030, 2146, 2249, 2350, 2407, 2617, 2744, 5829, 7762, 7764, 7820, 7843, 7844
City Point via Summer St. [12] 10 stops
1058, 1464, 1855, 1884, 2744, 5829, 7820, 7822, 7843, 7844
City Point via Summer St. [18] 11 stops
1059, 1060, 1464, 1855, 1884, 2744, 5829, 7820, 7822, 7843, 7844

Yes, the headsign and direction of these trips is the same but the number of stops varies!

THEREFORE (route_id + headsign) seems to be the fundamental unit. A common headsign shared by several routes doesn't have the same stops or number of stops.


Route.subgrouped_by_headsign.bus.each {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil

Result in file routes-headsign-for-buses.txt


Here's another one:

["22", "Ashmont Station via Jackson Station", "22_-1058", 308]
["22", "Ashmont Station via Jackson Station", "221-1058", 321]
["22", "Ashmont Station via Jackson Station", "222-1058", 324]

>> Trip.for(:route_id => [3008,321,324], :headsign => "Ashmont Station via Jackson Station", :date => "20091007").sort.each {|t| puts "#{t.headsign} #{t.start_time}, #{t.end_time} [#{t.route_id}] #{t.num_stops}"}; nil
Ashmont Station via Jackson Station 14:05:00, 14:43:00 [321] 35
Ashmont Station via Jackson Station 14:15:00, 15:03:00 [324] 39

Same day, same headhsigns, two different routes, with different numbers of stops.

Looking at the MBTA.com website schedule
http://mbta.com/schedules_and_maps/bus/routes/?route=22&direction=O&timing=W&RedisplayTime=Redisplay+Time

It does seem that the 2:05 and 2:15 trips have more stops than the ones before
and after.

Possible UI solution: show the multiples with the same headsign but different
routes. For each cell, show also the number of stops on the representative
trip. 

When a user selects that cell, show the map of all the stops, with each stop
labeled with a position and a time.

On the map view, add some controls. When a user taps a stop, show the next
arrival time for this stop. A second tap will show all the arrival times,
somewhere.


Another alternative is to have the common headsign, and then when the user selects it, 
show all the stops on the next mapview, even though the routes will differ slightly in the 
stops it services.

POSSIBLE SOLUTION:

For a route short name (a group of route_ids), show all the stops on a map.

On tap, show all the trips arriving at this stop, 

Highlight the next arrival time for a stop, ALONG WITH the headsign of the bus arriving at it.
CLICK this to see all the stops this bus will make, on a second map view, with numbers.

This is a hard problem because the structure of the data. Should I give up and turn to the outliner?

--------------------------------------------------------------------------------
LATEST PLAN

OK let's take the more conservative, practical solution. 

1. Don't aggregate all stops under a route_short_name. This clusters together
stops going in different directions that are just on opposites sides of the
street. This crowds the map.

2. Aggregate under the headsigns. The normal case is where one route has two
headsigns representing two directions, as in the case of Harvard Dudley bus 1.

The only other case is the one like City Point via Summer St. [Route short name
7], which has three distinct routes with different numbers of stops.

In this special case, let the user choose the common headsign as if it were one
group and on the next view, aggregate all the stops of the n routes with the
same headsign on a MAP.
 
Thus, the 2nd level navigation should be a MAP wtih the stops of one or more
routes plotted. One tap shows name and next arrival time.  AND this also
highlights the other pins and shows arrival times of that trip at those stops.
THIS may take care of the anomaly problem.

The only thing let is to provide a way to page through times. Place some kind of
control in the nav bar or bottom.

I like this solution because it is a cool UI.

http://blog.objectgraph.com/index.php/2009/04/08/iphone-sdk-30-playing-with-map-kit-part-3/

I'm glad I have the calendaring issue solved and bracketed so I can focus on the
route mapping UI.

--------------------------------------------------------------------------------
iPhone MapKit

- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation{
  NSLog(@"This is called");
  MKPinAnnotationView *test=[[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"parkingloc"];
  if([annotation title]==@"Parked Location")
  {
    [test setPinColor:MKPinAnnotationColorPurple];
  }
  else
  {
    [test setPinColor:MKPinAnnotationColorGreen];
  }
  return test;
}
 
================================================================================
MKAnnotation protocol:


#import <Foundation/Foundation.h>
#import <MapKit/MapKit.h>
 
 
@interface ParkPlaceMark : NSObject<MKAnnotation> {
  CLLocationCoordinate2D coordinate;
}
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
-(id)initWithCoordinate:(CLLocationCoordinate2D) coordinate;
- (NSString *)subtitle;
- (NSString *)title;
 
@end

--------------------------------------------------------------------------------

#import "ParkPlaceMark.h"
 
@implementation ParkPlaceMark
@synthesize coordinate;
 
- (NSString *)subtitle{
  return @"Put some text here";
}
- (NSString *)title{
  return @"Parked Location";
}
 
-(id)initWithCoordinate:(CLLocationCoordinate2D) c{
  coordinate=c;
  NSLog(@"%f,%f",c.latitude,c.longitude);
  return self;
}
@end

--------------------------------------------------------------------------------

Called from the controller:

  ParkPlaceMark *placemark=[[ParkPlaceMark alloc] initWithCoordinate:location];
  [mapView addAnnotation:placemark];

http://blog.objectgraph.com/index.php/2009/04/08/iphone-sdk-30-playing-with-map-kit-part-3/

--------------------------------------------------------------------------------
From the Apple documentation:

Annotating the Map

The MKMapView class supports the ability to annotate the map with custom
information. Because a map may have potentially large numbers of annotations,
map views differentiate between the annotation objects used to manage the
annotation data and the view objects for presenting that data on the map.

An annotation object is any object that conforms to the MKAnnotation protocol.
Annotation objects are typically implemented using existing classes in your
application’s data model. This allows you to manipulate the annotation data
directly but still make it available to the map view. Each annotation object
contains information about the annotation’s location on the map along with
descriptive information that can be displayed in a callout.

The presentation of annotation objects on the screen is handled by an annotation
view, which is an instance of the MKAnnotationView class. An annotation view is
responsible for presenting the annotation data in a way that makes sense. For
example, the Maps application uses a pin icon to denote specific points of
interest on a map. (The MapKit framework offers the MKPinAnnotationView class
for similar annotations in your own applications.) You could also create
annotation views that cover larger portions of the map.

Because annotation views are needed only when they are onscreen, the MKMapView
class provides a mechanism for queueing annotation views that are not in use.
Annotation views with a reuse identifier can be detached and queued internally
by the map view when they move off screen. This feature improves memory use by
keeping only a small number of annotation views in memory at once and by
recycling the views you do have. It also improves scrolling performance by
alleviating the need to create new views while the map is scrolling.

When configuring your map interface, you should add all of your annotation
objects right away. The map view uses the coordinate data in each annotation
object to determine when that annotation needs to appear on screen. When an
annotation moves on screen, the map view asks its delegate to create a
corresponding annotation view. If your application has different types of
annotations, it can define different annotation view classes to represent each
type.

--------------------------------------------------------------------------------
MKMapView Overview

An MKMapView object provides an embeddable map interface, similar to the one
provided by the Maps application. You use this class as-is to display map
information and to manipulate the map contents from your application. You can
center the map on a given coordinate, specify the size of the area you want to
display, and annotate the map with custom information.

Important: The MapKit framework uses Google services to provide map data. Use of
this class and the associated interfaces binds you to the Google Maps/Google
Earth API terms of service. You can find these terms of service at
http://code.google.com/apis/maps/iphone/terms.html.

When you initialize a map view, you should specify the initial region for that
map to display. You do this by setting the region property of the map. A region
is defined by a center point and a horizontal and vertical distance, referred to
as the span. The span defines how much of the map at the given point should be
visible and is also how you set the zoom level. Specifying a large span results
in the user seeing a wide geographical area and corresponds to a low zoom level.
Specifying a small span results in the user seeing a more narrow geographical
area and corresponds to a higher zoom level.

In addition to setting the span programmatically, the MKMapView class supports
many standard interactions for changing the position and zoom level of the map.
In particular, map views support flick and pinch gestures for scrolling around
the map and zooming in and out. Support for these gestures is enabled by default
but can also be disabled using the scrollEnabled and zoomEnabled properties.

Although you should not subclass the MKMapView class itself, you can get
information about the map view’s behavior by providing a delegate object. The
map view calls the methods of your custom delegate to let it know about changes
in the map status and to coordinate the display of custom annotations, which are
described in more detail in “Annotating the Map.” The delegate object can be any
object in your application as long as it conforms to the MKMapViewDelegate
protocol. For more information about implementing the delegate object, see
MKMapViewDelegate Protocol Reference.

--------------------------------------------------------------------------------
MBTA iPhone app “to a T” now supports buses

to a T, the only Boston iPhone app that helps users find the nearest T
station, has added MBTA bus information to its features for version
2.0.

Similar to the app’s existing subway coverage, the bus data is
comprehensive. At a glance, users can view all bus routes, all stops
on a given route and all bus routes that serve a given T station. This
allows users to determine bus-to-subway connections as well as bus-to-
bus connections.

The popular Closest Stops feature can now display both closest T
stations and closest bus stops to a user’s location. Arrows that
correspond to the colors of the subway lines alert users to buses that
will transfer them to T stations.

The new version also employs Google Maps routing functionality with
the app’s Walk Here and Ride Here options. Users can view all
applicable transportation options—by foot, bus, train or a combination
of these—for getting to a destination. Driving directions are also
available.

Wonderland Development’s to a T provides iPhone and iPod Touch users
with maps and location information for Boston-area subways and buses.
The app provides a zoomable map of the MBTA red, green, blue, orange,
and silver lines as well as commuter rail lines. Users can zoom in on
any stop, including those often left off the green line branches on
some MBTA maps. Local maps of the area surrounding each T station and
bus stop are also available. The app’s Closest Stops function helps
users find the stations and stops nearest to their locations in real
time. Users can search all lines and routes or customize their
searches.

For more information see http://devwonderland.com 

--------------------------------------------------------------------------------
T alert RSS feed IDS

Hi, folks,
We know there is still work to be done on our end to make the T-Alerts
RSS feed as helpful as possible to developers and other users.  We are
working to improve the consistency of the information and to
streamline the XML feed to make it machine-readable.

In the meantime, we have developed two ID files that describe the
piece of infrastructure affected by each Alert (Green Line, #1 Bus,
Ashmont Elevator on Eastbound Platform, etc.).  The ID files will be
posted later today in a ZIP on the Developers Page, immediately below
the "T Alerts" link.  (I've provided the rapid-transit and commuter-
rail IDs below, for those who can't wait!)

You can access Alerts for each individual piece of infrastructure by
attaching "?(###)" at the end of the full feed string (http://
talerts.com/rssfeed/alertsrss.aspx).

For example,

http://talerts.com/rssfeed/alertsrss.aspx?17 will feed Green Line
Alerts.
http://talerts.com/rssfeed/alertsrss.aspx?58 will feed #1 Bus Alerts.
http://talerts.com/rssfeed/alertsrss.aspx?HP46 will feed Ashmont
Elevator EB Platform Alerts.

Is this information helpful to those working on integrating T-Alerts
into applications?

Best,
Chris from EOT

Fairmount       1
Fitchburg/South Acton   2
Framingham/Worcester    4
Franklin/Forge Park     5
Haverhill       7
Lowell  8
Middleborough/Lakeville 9
Needham 10
Newburyport/Rockport    11
Kingston/Plymouth       12
Providence/Stoughton    14
Red Line        15
Orange Line     16
Green Line      17
Blue Line       18
Washington Street       19
SL1: Airport Terminal - South Station   20
SL2: Boston Marine Industrial Park - South Station      28
SL3: City Point - South Station via Boston Marine Industrial Park       29
All Lines/Routes        99
Silver Line Washington St.    Dudley Station - Downtown via Washington
Street  53
Mattapan Trolley Shuttle Bus    Mattapan Sta. - Ashmont Sta.    57
Greenbush        232
Red Line - Mattapan Line        233 

--------------------------------------------------------------------------------
Hi, folks,
Below you will find the dates, rules and FAQ for the Developers
Challenge.  We wanted to make sure that these guidelines were clear
for all potential submitters.  Our goal with the Challenge is to
unlock as much creativity as possible, so we've kept the Rules as open
and flexible as we could  You'll see that the Rules are consistent
with our Relationship Principles and Developers License Agreement.

This document will be posted on our Developers Page tomorrow.  Please
let us know if you have questions or concerns.

We look forward to receiving your submissions!

Best,
Chris from EOT

MassDOT Developers Challenge
Dates, Rules, and FAQ

Important Dates:

Competition Submission Period Begins:
5:00pm EST September 28, 2009
Competition Submission Period Ends:
5:00pm EST November 9, 2009
Winner selection by Judges:
November 10, 2009 - November 13, 2009
Awards Ceremony:
MassDOT Developers Conference, November 14, 2009

General Rules:

1.  The Developers Challenge is open to U.S. residents 18 and over,
and small businesses and organizations domiciled in the U.S.
2.  Submissions must be accessible to the public.  The Applications
may be designed for the web, mobile devices, desktop computers, or any
software platform broadly available to the public. If the application
can not be accessed by the public and the judges via the web, a link
to video of all application features must be submitted. Judges may
request that the developer provide access to the software through some
reasonable, additional means, for verification purposes.
3.  Submitters retain rights and ownership of submitted applications
and visualizations. All applications submitted to the Developers
Challenge remain the intellectual property of the individuals or
organizations that developed them.
4.  MassDOT reserves the rights to use apps and visualizations in
future public-relations campaigns and programs.
5.  Contestants can be an individual or a team of individuals,
however, only one prize will be awarded for each team.  All team
members will receive recognition at the Developers Conference.
6.  Contestants can enter as many applications as they like and each
app is eligible for a prize according to these rules.
7.  Applications must comply with the MassDOT Developers Relationship
Principles and Developers License Agreement.
8.  Contestants must submit their applications to MassDOT by 5pm on
November 9, 2009.  Submit applications by emailing
christopher.demp...@state.ma.us with instructions on how to access
your application, names of your team members, contact information
(including cell phone), and other applicable information.
Applications may also be submitted to the MassDOT Developers Google
Group: http://groups.google.com/group/massdotdevelopers?lnk=gcimv.

Judging Criteria for Apps:
1.  Utilization of Developers Page data.
2.  Quality of design.
3.  Usefulness to the citizens, visitors and Commonwealth of Massachusetts.
4.  Openness, accessibility, and price.
5.  Originality.

Judging Criteria for Data Visualization “A Day in the Life of the T”:
1.  Utilization of Developers Page data.
2.  Artistic appeal and presentation.
3.  Usability by MassDOT in future public-relations efforts and
initiatives.

Granting of Awards:
1.  Awards will be granted by a panel chosen by MassDOT and will be
announced at the MassDOT Developers Conference, November 14th, 2009.

App Contest – First Place
CharlieCard LinkPass Valid for 1 Year

Data Visualization – First Place
CharlieCard LinkPass Valid for 1 Year

App Contest – Second Place
30 Min Session on MBTA Bus Simulator

Data Visualization– Second Place
30 Min Session on MBTA Bus Simulator

FAQ:
Does my app need to be free to the public?
No.  Apps that are distributed to the public at a cost are
acceptable.  However, free Apps will receive additional weight in the
judging process.

Can my app employ advertising?
Yes.  However, Apps without advertising will receive additional weight
in the judging process.

Does my app need to be accessible on the web?
No. Apps may be submitted in any generally-accessible platform.

Does my app need to be open-source?
No.  However, open-source Apps will receive additional weight in the
judging process.

What kinds of Data Visualizations is MassDOT looking for?
There are no set expectations for the data visualization.  However,
MassDOT prefers visualizations that are accessible via standard image
and video websites (YouTube, Vimeo, Flickr) for maximum public
exposure.

Does my app need to be open-source?
No.  However, open-source Apps will receive additional weight in the
judging process. 


--------------------------------------------------------------------------------
iPhone Application Test

http://www.nytimes.com/2009/10/06/health/06mind.html?em=&pagewanted=print

MyAppTests.h
#import <SenTestingKit/SenTestingKit.h>
#import <UIKit/UIKit.h>
@interface MyAppTests : SenTestCase {
}
@end

MyAppTests.m
#import "ApplicationTests.h"
@implementation ApplicationTests
- (void) testFail {
      STFail(@"Must fail to succeed.");
}
@end

MyAppTests.m
#import "MyAppTests.h"
@implementation LogicTests
- (void) testAppDelegate {
   id app_delegate = [[UIApplication sharedApplication] delegate];
   STAssertNotNil(app_delegate, @"Cannot find the application delegate.");
}
@end

I'm not sure it's worth it to test on the Application level. How much can be
tested on the model level?

--------------------------------------------------------------------------------
Setting Up Logic Testing

To set up a logic–unit-test bundle in a project:

1. Add an iPhone OS unit-test bundle target to the project. Name the target
LogicTests (you can use any name you like for your unit-test bundles, but you
should include the suffix Tests to identify them as such).  For details about
adding targets to a project, see “Creating Targets” in Xcode Build System
Guide.

2. Set the LogicTests target as the active target.

3. Add a group called Tests to the Group & Files list, and select that group in the list.

4. Add a unit-test class to the unit-test-bundle target. Each unit-test class in the bundle makes up a test suite.
   1. Choose File > New, select the iPhone OS unit-test class template, and click Next.
   2. Name the class LogicTests (you can use any name here, too).
   3. Select the option to create the header file.
   4. Ensure that LogicTests is the only target selected in the target list.  

5. Change LogicTests.h so that it looks like this:

#import <SenTestingKit/SenTestingKit.h>
#import <UIKit/UIKit.h>
@interface LogicTests : SenTestCase {
}
@end

6. Change LogicTests.m so that it looks like this:

#import "LogicTests.h"
@implementation LogicTests
- (void) testFail {
      STFail(@"Must fail to succeed.");
}
@end

7. Set the base SDK for the project to iPhone Simulator 3.0 or later. For more
information about the Base SDK build setting, see “Setting the Base SDK.”

8. Set the active target to LogicTests and choose Build > Build. If the
unit-test bundle is configured correctly, the build fails and Xcode displays an
error message in the text editor.  

9. Now make the test case pass by changing the highlighted lines in LogicTest.m:

#import "LogicTests.h"
@implementation LogicTests
- (void) testPass {
      STAssertTrue(TRUE, @"");
}
@end

--------------------------------------------------------------------------------
Next step

Build the first level of navigation. The user chooses a mode of transport, and
the server return JSON for the 1st table view. This JSON should have the
folllowing structure.

The Bus Case:

For buses, it should be an array of hashes. The hash should look like this:

  { :route_short_name => 1,
    :headsigns => ["headsign1", "headsign2", etc.] }
   
The server need to deal with the selection response, which will be a route short
name and a headsign. From this the server must construct an API response with
the data to generate the next view, which is a map with all the stops for that
headsign.

The routes without a headsign of " " should be placed in a virtual route with
short name "Other."

Start with the Ruby model. 

Route.subgrouped_by_headsign.bus.each  {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil

Turn this into something like

Route.subgrouped_by_headsign.bus.each  {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil

Route.bus.subgrouped_by_headsign.group_by {|r| r.short_name}
=> #<OrderedHash {"9502"=>[#<Route id: 1045, mbta_id: "9502-1058", short_name:
"9502", long_name: "9502", route_type: 3>, #<Route id: 1045, mbta_id:
"9502-1058", short_name: "9502", long_name: "9502", route_type: 3>],
"25"=>[#<Route id: ...

Need to convert this ordered hash into an array.

Route.bus.subgrouped_by_headsign.group_by {|r| r.short_name}.map {|k,v| {:route_short_name => k, :headsigns => v.sort}}

select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign;

ActiveRecord::Base.connection.select_all("select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign")


This works

>> ActiveRecord::Base.connection.select_all("select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign").select {|r| r["short_name"] == "1"}
=> [{"headsign"=>"Dudley Station via Mass. Ave.", "short_name"=>"1"}, {"headsign"=>"Harvard Station via Mass. Ave.", "short_name"=>"1"}]

>> ActiveRecord::Base.connection.select_all("select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign").select {|r| r["short_name"] == "CT1"}
=> [{"headsign"=>"B.U. Medical Center (Limited Stops)", "short_name"=>"CT1"}, {"headsign"=>"B.U. Medical Center - Limited Stops", "short_name"=>"CT1"}, {"headsign"=>"Central Square (Limited Stops)", "short_name"=>"CT1"}]

Now if we do a group_by:

>> ActiveRecord::Base.connection.select_all("select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign").group_by {|r| r["short_name"]}
=> #<OrderedHash {"9502"=>[{"headsign"=>"Quincy Ave. at Scammell St.", "short_name"=>"9502"}, {"headsign"=>"Water St. at Granite Ave.", "short_name"=>"9502"}], 
  "25"=>[{"headsign"=>"Franklin Park via Grove Hall", "short_name"=>"25"}, {"headsign"=>"Ruggles Station via Grove Hall", "short_name"=>"25"}], 
  "26"=>[{"headsign"=>"26 ASHMONT BELT", "short_name"=>"26"}, {"headsign"=>"Ashmont Belt via Norfolk St.", "short_name"=>"26"}, {"headsign"=>"Ashmont Belt via Washington St.", "short_name"=>"26"}], 
  "110"=>[{"headsign"=>"Broadway & Park via Woodlawn", "short_name"=>"110"}, {"headsign"=>"Ferry at Elm via Chelsea St.", "short_name"=>"110"}, {"headsign"=>"Wellington via Woodlawn", "short_name"=>"110"}, {"headsign"=>"Wonderland via Woodlawn", "short_name"=>"110"}, {"headsign"=>"Woodlawn via Broadway", "short_name"=>"110"}], 
  "83"=>[{"headsign"....

Let's transform this:
>> ActiveRecord::Base.connection.select_all("select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign").group_by {|r| r["short_name"]}.map {|short_name, values| {:route_short_name => short_name, :headsigns => values.map {|x| x["headsign"] } }  } 
=> [{:route_short_name=>"CT3", :headsigns=>["Andrew Station (Limited Stops)", "Beth Israel (Limited Stops)"]}, 
{:route_short_name=>"CT1", :headsigns=>["B.U. Medical Center (Limited Stops)", "B.U. Medical Center - Limited Stops", "Central Square (Limited Stops)"]}, 
{:route_short_name=>" ", :headsigns=>["Boston Marine Industrial Park", "Downtown", "Dudley Station", "Logan Airport", "Silver Line Way", "South Station"]}, 
{:route_short_name=>"Shuttle", :headsigns=>["Loop"]}, 
{:route_short_name=>"CT2", :headsigns=>["Ruggles via Kendall/MIT - Limited Stops", "Sullivan Station via Kendall/MIT - Limited Stops"]}, 
{:route_short_name=>"1", :headsigns=>["Dudley Station via Mass. Ave.", "Harvard Station via Mass. Ave."]}, 
{:route_short_name=>"4", :headsigns=>["North Station", "North Station via Commercial St.", "Tide St./BMIP via Commercial St.", "Tide St./BMIP via World Trade Center"]}, 
{:route_short_name=>"5", :headsigns=>["City Point via Andrew Station", "McCormack Housing via Andrew Station"]}, 
{:route_short_name=>"7", :headsigns=>["City Point via Summer St.", "City Point via Summer St. & Harbor Industrial Park", "Downtown via Summer St.", "Downtown via Summer St. & Harb ...

Finally, we need to order this result in a complex sort_by block

>> ActiveRecord::Base.connection.select_all("select routes.short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign").group_by {|r| r["short_name"]}.map {|short_name, values| {:route_short_name => short_name, :headsigns => values.map {|x| x["headsign"] } } }.sort_by {|x| x[:route_shortname].to_i == 0 ? 10000 : x[:route_shortname].to_i}

This works, but puts the " " route short name first. I just need to make a more
sophisticated sort_by block, probably multilined.

This works in principle though.

Now translate this array into JSON and send it to the iPhone app.

ActiveRecord::Base.connection.select_all("select coalesce(routes.short_name, "Other"), trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign").group_by {|r| r["short_name"]}.map {|short_name, values| {:route_short_name => short_name, :headsigns => values.map {|x| x["headsign"] } } }.
sort_by {|x| 
  s = x[:route_shortname]
  if s.blank?
    next 1009
  end
  if s.to_i == 0 
    if s == "Shuttle"
      return 1008
    else
      1001
    end
  else
    s.to_i
  end
}

This is still a problem:
=> [{:route_short_name=>" ", :headsigns=>["Boston Marine Industrial Park", "Downtown", "Dudley Station", "Logan Airport", "Silver Line Way", "South Station"]}

Take an example of a headsign with a route with a blank short name:

mysql> select * from trips where headsign = "Dudley Station" limit 1;
+-------+-------------------------------------+----------+------------+----------------+------------+----------+---------------------------+-------------------------------+-----------+------------+--------------------+------------------+------------------+---------------+
| id    | mbta_id                             | route_id | service_id | headsign       | start_time | end_time | first_stop                | last_stop                     | num_stops | route_type | service_start_date | service_end_date | route_short_name | schedule_type |
+-------+-------------------------------------+----------+------------+----------------+------------+----------+---------------------------+-------------------------------+-----------+------------+--------------------+------------------+------------------+---------------+
| 74564 | 11462858-BUSS49-hbs49011-Weekday-03 |      933 |         70 | Dudley Station | 25:02:00   | 25:13:00 | Temple Pl @ Washington St | Dudley Station - Harvard Side |        12 |          3 | 2009-09-08         | 2009-12-23       |                  | weekday       | 
+-------+-------------------------------------+----------+------------+----------------+------------+----------+---------------------------+-------------------------------+-----------+------------+--------------------+------------------+------------------+---------------+
1 row in set (0.00 sec)

mysql> select route_id, route_short_name from trips where headsign = "Dudley Station" limit 1;
+----------+------------------+
| route_id | route_short_name |
+----------+------------------+
|      933 |                  | 
+----------+------------------+
1 row in set (0.00 sec)

mysql> select * from routes where id = 933;
+-----+-----------+------------+-----------+------------+
| id  | mbta_id   | short_name | long_name | route_type |
+-----+-----------+------------+-----------+------------+
| 933 | 749_-1058 |            |           |          3 | 
+-----+-----------+------------+-----------+------------+
1 row in set (0.00 sec)

mysql> 

--------------------------------------------------------------------------------
SOLUTION: use a Mysql Case statement

mysql> select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign;

ActiveRecord::Base.connection.select_all("select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign").group_by {|r| r["route_short_name"]}.map {|short_name, values| {:route_short_name => short_name, :headsigns => values.map {|x| x["headsign"] } } }.
sort_by {|x| x[:route_short_name].to_i == 0 ? 10000 : x[:route_short_name].to_i }

This WORKS
=> ...
{:route_short_name=>"Other", :headsigns=>["Boston Marine Industrial Park", "Downtown", "Dudley Station", "Logan Airport", "Silver Line Way", "South Station"]}, 
{:route_short_name=>"CT1", :headsigns=>["B.U. Medical Center (Limited Stops)", "B.U. Medical Center - Limited Stops", "Central Square (Limited Stops)"]}, 
{:route_short_name=>"CT2", :headsigns=>["Ruggles via Kendall/MIT - Limited Stops", "Sullivan Station via Kendall/MIT - Limited Stops"]}, 
{:route_short_name=>"CT3", :headsigns=>["Andrew Station (Limited Stops)", "Beth Israel (Limited Stops)"]}, 
{:route_short_name=>"Shuttle", :headsigns=>["Loop"]}]

--------------------------------------------------------------------------------
12:38 - Lunch time. Been working on this for about 2.5 hours. Also swam this morning.

Next step: wrap this in a Rails controller response and serve it to the iPhone.
- Make 1st let navigation: Bus, Subway, Commuter Rail, Boat
- Make 2nd level work for all four modes.

This afternoon: work on the Map navigation view. If I finish this part by tonight, the app will be half finished. Try to finish by Friday night, then do RubyCocoa app.

But start studying RubyCocoa again today and do it during breaks.

Rails action. Take a route_short_name and a headsign and return a hash with a trips array of hashes and a stops lookup hash. 

I already have the class method:

Trip.for(:route_id => 2, :headsign => "Dudley Station via Mass. Ave.", :date => "20091007").sort.each {|t| puts "#{t.start_time}, #{t.end_time}"}; nil

Trip.for(:route_id => 2, :headsign => "Dudley Station via Mass. Ave.", :date => "20091007")

The next step is to make this output the data in the structure I need. Need to combine with all the stops. Do it efficiently.

This works!!

Make sure to URL escape the headsign:
curl "http://localhost:3000/trips?date=20091008&route_id=2&headsign=Dudley%20Station%20via%20Mass.%20Ave."

Check out the result in trips.json

The JSON file is a 237K for Dudley Station. It will probably be smaller after
gzip compression. Gzipped, it's only 18K. Acceptable. Good.

Structure of response:

{"stops":
  {7628:
    {"num_stoppings": "112",
     "lat": 42.3336,
     "name": "Massachusetts Ave @ Albany St",
     "lng": -71.0736},
   5725:
    {"num_stoppings": "112",
     "lat": 42.3295,
     "name": "Dudley Station - Harvard Side",
     "lng": -71.0839},
   ...
 "trips":
  [{"start_time": "05:10:00",
    "end_time": "05:35:00",
    "stoppings":
     [{"stop_id": 201,
       "arrival_time": "05:10:00",
       "position": 1}, 
       ...
    },
   {"start_time": "05:30:00",
    "end_time": "05:55:00",
    "stoppings":
     [{"stop_id": 201,
       "arrival_time": "05:30:00",
       "position": 1},
....

Next, dive into Objective-C and work on the map view with a flat file of this
JSON output. This is the meat of this application, so it may take the rest of
tonight and tomorrow.

Take out first_stop and last_stop from trips in the JSON. This data is
redundant. Also, remember that the number of stops in a trip can be calculated
simply by the size of the array of stoppings.

Make an Objective C class that simply takes a JSON structure and turns it into a
NSDictionary. Or does JSON.h already do that?

The first step in making the map view is to put all the stops on the map.

The next step is to show one trip with the trip times.

"num_stoppings" is misleading. It's actually the number of arrivals throughout
the day.

The only way to find out is to experiment.

Put the pretty formatted JSON file of this number 1 bus route/headsign in a new
iPhone project and start from that.

Started an iPhone XCode project called OpenMBTA.

Copying the sample JSON response text file to the application.

I made a discovery. Pretty-printed JSON is INVALID JSON. The Objective C JSON
parser can't handle it.

For a few minutes, had problems getting the map view to show. The solution was
simple. I needed to add the MapKit framework but going to Edit > Edit Active
Target > General Tab > add framework.

The map now appears.

http://www.invasivecode.com/tag/google-maps/

Put OpenMBTA under git.

Next step. Focus the map on the area covered by the trip.

Then: add placemarks for all thes stops.


  [mapView addAnnotation:placemark];
 
--------------------------------------------------------------------------------

/*Region and Zoom*/
MKCoordinateRegion region;
MKCoordinateSpan span;
span.latitudeDelta=0.2;
span.longitudeDelta=0.2;

CLLocationCoordinate2D location=mapView.userLocation.coordinate;

location.latitude=40.814849;
location.longitude=-73.622732;
region.span=span;
region.center=location;

--------------------------------------------------------------------------------
Another tutorial:

Setting the Region

If you want to represent a specific portion of the map with a specific zoom
level, you need to define a Map Region. This is a C structure composed by the
Center and the Span. The Center is represented by the Longitude and the
Latitude of the Region center, while the Span defines how much of the map is
visible and is also the zoom level. A large Span corresponds to a low zoom
level, while a small Span corresponds to a high zoom level.

Place at the end of viewDidLoad:

MKCoordinateRegion region = { {0.0, 0.0 }, { 0.0, 0.0 } };
region.center.latitude = 41.902245099708516;
region.center.longitude = 12.457906007766724;
region.span.longitudeDelta = 0.01f;
region.span.latitudeDelta = 0.01f;
[mapView setRegion:region animated:YES];

Now, if you want to pan or zoom programmatically, you just need to change
programmatically the Region. If you change the Span, you zoom. If you change
the Center, you pan. Simple, no?

--------------------------------------------------------------------------------

I may need the Ruby app to return a new data item: the lat and lng of the
center and the longitude and latitude Delta.

So it looks like this:

"region":{"center_lat":42.3523,"center_lng":-71.0963,"lat_span":0.0228000000000037,"lng_span":0.0227000000000004},

--------------------------------------------------------------------------------
Use this to let user tap on callout.

rightCalloutAccessoryView

The view to display on the right side of the standard callout bubble.

@property (retain, nonatomic) UIView *rightCalloutAccessoryView

Discussion

This property is set to nil by default. The right callout view is typically
used to link to more detailed information about the annotation. A common view
to specify for this property is UIButton object whose type is set to
UIButtonTypeDetailDisclosure.

If the view you specify is also a descendant of the UIControl class, you can
use the map view’s delegate to receive notifications when your control is
tapped. If it does not descend from UIControl, your view is responsible for
handling any touch events within its bounds.  Availability

    * Available in iPhone OS 3.0 and later.

See Also

    *   @property canShowCallout

Declared In
MKAnnotationView.h

--------------------------------------------------------------------------------
mapView:annotationView:calloutAccessoryControlTapped:

Tells the delegate that the user tapped one of the annotation view’s accessory
buttons. (optional)

- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view calloutAccessoryControlTapped:(UIControl *)control

Parameters

mapView

    The map view containing the specified annotation view.
view

    The annotation view whose button was tapped.
control

    The control that was tapped.

Discussion

Accessory views contain custom content and are positioned on either side of the
annotation title text. If a view you specify is a descendant of the UIControl
class, the map view calls this method as a convenience whenever the user taps
your view. You can use this method to respond to taps and perform any actions
associated with that control. For example, if your control displayed additional
information about the annotation, you could use this method to present a modal
panel with that information.

If your custom accessory views are not descendants of the UIControl class, the
map view does not call this method.  

Availability

    * Available in iPhone OS 3.0 and later.

Declared In
MKMapView.h
--------------------------------------------------------------------------------
In the delegate method, get the stop that was tapped using this property of the
annotation:

annotation

The annotation object currently associated with the view.

@property (nonatomic, retain) id <MKAnnotation> annotation

Discussion

You should not change the value of this property directly. This property
contains a non-nil value only while the annotation view is visible on the map.
If the view is queued and waiting to be reused, the value is nil

Declared In
MKAnnotationView.h

--------------------------------------------------------------------------------
The last step is to implement a delegate method that manages the annotations
during the panning and zooming. The approach is very similar to the
UITableView. We create a static identifier and we try to reuse the annotation
view with the same identifier, as we do with the cell of the tableview. If we
are not able to dequeue an annotation view, we need to allocate one. Then, we
choose the pin color and allow a callout view. Then, we animate the drop of the
pin.

Add the following code to the MapperViewController.m file:

- (MKAnnotationView *)mapView:(MKMapView *)mV viewForAnnotation:(id )annotation {

    MKPinAnnotationView *pinView = nil;
    if(annotation != mapView.userLocation)
    {
         static NSString *defaultPinID = @"com.invasivecode.pin";
         pinView = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:defaultPinID];
         if ( pinView == nil )
            pinView = [[[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:defaultPinID] autorelease];
        pinView.pinColor = MKPinAnnotationColorPurple;
        pinView.canShowCallout = YES;
        pinView.animatesDrop = YES;
    }
    else
        [mapView.userLocation setTitle:@"I am here"];
    return pinView;
}

--------------------------------------------------------------------------------
I think I know how to make the rest of the app now.

1. When a user taps a stop, show the callout with a disclosure button. 

2. When the button is tapped, push in a table view that shows all the upcoming
arrival times at this stop.

3. The arrival time rows have a disclosure button. When tapped, push in a new
table view that shows all the (future) stops in order and the arrival times.

4. On the map, use blue pins to indicate where a bus is next due to arrive based
on the current time.

Fri Oct  9 13:03:04 EDT 2009

Adding accessory button to callout. Registering the tap on the pin.

To make the stop name fit on the callout, it needs to be the subtitle. The title
then ought to be the next stop time.

1. So now I need to work out the logic to highlight the next stops of the buses
and color that pin. 

2. I also need to take a tapped callout, and then show the arrival times at that
stop for the rest of the da.

Maybe the trips map view needs only the stop data. The stops will have
additional data for the callout: the next two arrival times, and a flag
saying whether a bus is about to arrive at that pin.

Or put all this data along with all the trip data. Write Objective C to do the
calculations? This might be better because the data can change based on an
NSTimer.

Break down this problem.

--------------------------------------------------------------------------------
To find the location of the bus (the stops it is approaching):

1. Loop through the trips. Eliminate the ones that haven't started yet and the
ones that have ended.

2. Of the remaining trips, loop through them. For each trip, loop through the
stops, until there is a stop whose arrival time is in the future. Break the
loop, and change the color of the corresponding pin.

Do this for all trips in this set.

--------------------------------------------------------------------------------
The next problem is showing all the arrivals at a stop. 

You have a stop_id. On the next view, use all the trips that the trips
controller has.

Loop through the trips. For each trip, loop through the stops until we have a
matching stop_id. Store this arrival_time and trip_id in the NSMutableArray the
TripStopViewController. 

This view is a table view. When a cell is selected, take the trip id and the
stop id and show a new table view that shows all the stops on that trip, and
highlight the stop that was shown in the previous view.

--------------------------------------------------------------------------------
Sitting in Starbucks Kendall, listening to Paramore, which is great to code to.

I'm now tying the iPhone application to the Rails server.

I can try to populate the first level view of the app, but putting this first
might slow down the build test cycle. But I can short circuit it in
RootViewController.

Remember that this the URL:

curl "http://localhost:3000/trips?date=20091008&route_id=2&headsign=Dudley%20Station%20via%20Mass.%20Ave."

NSDateFormatter notes

NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init]  autorelease];
[dateFormatter setDateStyle:NSDateFormatterMediumStyle];
[dateFormatter setTimeStyle:NSDateFormatterNoStyle];

- (NSString *)stringFromDate:(NSDate *)date

NSDateFormatterShortStyle
Specifies a short style, typically numeric only, such as “11/23/37” or “3:30pm”.

Equal to kCFDateFormatterShortStyle.

Available in iPhone OS 2.0 and later.

Declared in NSDateFormatter.h.
Discussion
The format for these date and time styles is not exact because they depend on
the locale, user preference settings, and the operating system version. Do not
use these constants if you want an exact format.

setDateFormat:
Sets the date format for the receiver.

- (void)setDateFormat:(NSString *)string

Parameters
string
The date format for the receiver. See Data Formatting Programming Guide for
Cocoa for a list of the conversion specifiers permitted in date format strings.

Availability
Available in iPhone OS 2.0 and later.

See Data Formatting Programming Guide for Cocoa 

[formatter setDateFormat:@"h:mma"];

Do this date formatting later. Focus on getting the app talking to the Rails
server.

This is working, and the call is taking almost 1 second.
Completed in 919ms (View: 1, DB: 183) | 200 OK
[http://localhost/trips?date=20091009&route_id=2&headsign=Dudley%20Station%20via%20Mass.%20Ave.]

Analysis

Processing TripsController#index (for 127.0.0.1 at 2009-10-09 15:59:07) [GET]
  Parameters: {"headsign"=>"Dudley Station via Mass. Ave.", "date"=>"20091009", "route_id"=>"2"}
  Service Load (0.5ms)   SELECT * FROM `services` WHERE (services.start_date <= '2009-10-09' and services.end_date >= '2009-10-09' and services.friday = 1 )
  Service Load (1.5ms)   SELECT `services`.* FROM `services` inner join service_exceptions on service_exceptions.service_id = services.id WHERE (service_exceptions.date = '2009-10-09' and service_exceptions.exception_type = 1)
  Service Columns (2.3ms)   SHOW FIELDS FROM `services`
  Service Load (43.3ms)   SELECT `services`.* FROM `services` inner join service_exceptions on service_exceptions.service_id = services.id WHERE (service_exceptions.date = '2009-10-09' and service_exceptions.exception_type = 2)
  Trip Load (7.7ms)   SELECT * FROM `trips` WHERE (route_id in ('2') and headsign = 'Dudley Station via Mass. Ave.' and service_id in (13,15,21,27,33,50,52,58,64,70,87,114,132,140,148,158,159,162,169,170)) ORDER BY start_time asc
  Trip Columns (2.2ms)   SHOW FIELDS FROM `trips`
  Stop Load (21.8ms)   SELECT stops.*, count(*) as num_stoppings FROM `stops` INNER JOIN `stoppings` ON stoppings.stop_id = stops.id WHERE (stoppings.trip_id in (605,615,651,671,606,616,628,641,652,666,672,607,613,567,617,623,629,642,653,667,673,608,614,618,624,630,643,654,674,599,597,595,593,600,603,601,598,596,591,592,602,604,594,631,644,655,662,609,619,625,632,645,656,663,668,676,610,620,626,633,636,638,646,648,657,659,664,669,675,677,611,621,627,634,637,639,647,649,658,660,665,670,678,612,622,635,640,650,661,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590)) GROUP BY stoppings.stop_id
  Stopping Load (0.9ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 605) ORDER BY position asc
  Stopping Columns (1.7ms)   SHOW FIELDS FROM `stoppings`
  Stopping Load (0.9ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 615) ORDER BY position asc
  Stopping Load (1.2ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 651) ORDER BY position asc
  Stopping Load (1.1ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 671) ORDER BY position asc
  Stopping Load (0.8ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 606) ORDER BY position asc
  Stopping Load (0.9ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 616) ORDER BY position asc
  Stopping Load (0.9ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 628) ORDER BY position asc
  Stopping Load (0.9ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 641) ORDER BY position asc
  Stopping Load (1.1ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 652) ORDER BY position asc
  Stopping Load (1.1ms)   SELECT * FROM `stoppings` WHERE (`stoppings`.trip_id = 666) ORDER BY position asc
 
There doesn't seem any way to make this faster EXCEPT to reduce the number of trips returned.
Filter by time and also limit the number of results.

Maybe allow paging. The iPhone app can have a more trips ?

On the map view, we only need the the trips that are occurring and are in the
near future. The next view, when a user selected a stop, may be the right time
to make another call to the server to return all the trips that will pass
through the stop?

--------------------------------------------------------------------------------
Doing the routes 2nd level navigation table (RoutesViewController)

Need to create a Rails action that responds to the API call.

Route.subgrouped_by_headsign.bus.each  {|r| puts [r.short_name, r.headsign, r.mbta_id, r.id].inspect}; nil

Route.bus.subgrouped_by_headsign.group_by {|r| r.short_name}
=> #<OrderedHash {"9502"=>[#<Route id: 1045, mbta_id: "9502-1058", short_name:
"9502", long_name: "9502", route_type: 3>, #<Route id: 1045, mbta_id:
"9502-1058", short_name: "9502", long_name: "9502", route_type: 3>],
"25"=>[#<Route id: ...

Copied from earlier:

SOLUTION: use a Mysql Case statement

mysql> select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign;

ActiveRecord::Base.connection.select_all("select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign").group_by {|r| r["route_short_name"]}.map {|short_name, values| {:route_short_name => short_name, :headsigns => values.map {|x| x["headsign"] } } }.
sort_by {|x| x[:route_short_name].to_i == 0 ? 10000 : x[:route_short_name].to_i }

This WORKS
=> ...
{:route_short_name=>"Other", :headsigns=>["Boston Marine Industrial Park", "Downtown", "Dudley Station", "Logan Airport", "Silver Line Way", "South Station"]}, 
{:route_short_name=>"CT1", :headsigns=>["B.U. Medical Center (Limited Stops)", "B.U. Medical Center - Limited Stops", "Central Square (Limited Stops)"]}, 
{:route_short_name=>"CT2", :headsigns=>["Ruggles via Kendall/MIT - Limited Stops", "Sullivan Station via Kendall/MIT - Limited Stops"]}, 
{:route_short_name=>"CT3", :headsigns=>["Andrew Station (Limited Stops)", "Beth Israel (Limited Stops)"]}, 
{:route_short_name=>"Shuttle", :headsigns=>["Loop"]}]


Created a new class method of Route 

>> Route.routes(4)
=> [{:route_short_name=>"F1", :headsigns=>[nil]}, {:route_short_name=>"F2", :headsigns=>["Loop"]}, {:route_short_name=>"F2(H)", :headsigns=>["Loop"]}, {:route_short_name=>"F4", :headsigns=>[nil]}]

>> Route.routes(0,1)  # => return subway routes

Created a /routes controller to hadn this. Sample requests:

Processing RoutesController#index (for 127.0.0.1 at 2009-10-09 16:38:23) [GET]
  Parameters: {"transport_type"=>"bus"}
  SQL (349.7ms)   select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign
Completed in 380ms (View: 1, DB: 350) | 200 OK [http://localhost/routes?transport_type=bus]
  SQL (0.1ms)   SET SQL_AUTO_IS_NULL=0


Processing RoutesController#index (for 127.0.0.1 at 2009-10-09 16:38:27) [GET]
  Parameters: {"transport_type"=>"commuter_rail"}
  SQL (11.2ms)   select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (2) group by routes.short_name, trips.headsign
Completed in 32ms (View: 1, DB: 11) | 200 OK [http://localhost/routes?transport_type=commuter_rail]

The json for bus route short names and headsigns is about 4 terminal screens
long.

16:40. A good time for a break.

--------------------------------------------------------------------------------
17:24 Walked to Starbucks next to Trader Joe's and Microcenter.

This is what the /routes response looks like

[{"route_short_name":"1","headsigns":["Dudley Station via Mass. Ave.","Harvard Station via Mass. Ave."]},{"route_short_name":"4","headsigns":["North Station","North Station via Commercial St.","Tide St./BMIP via Commercial St.","Tide St./BMIP via World Trade Center"]},{"route_short_name":"5","headsigns":["City Point via Andrew Station","McCormack Housing via Andrew Station"]},{"route_short_name":"7","headsigns":[" ...

18:07 wired up most of the 2nd level nav. Now I need to get the selection of a
table cell to send a headsign param and a route_id param (can be multiple,
joined by commas).

OK this works, now using route_short_name

Need to tweak the section headers and the table cell layout. Need a custom
table cell.

select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign;

select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign, sum(trips.num_stops) from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) group by routes.short_name, trips.headsign order by convert(routes.short_name, unsigned), headsign;


To prevent getting empty stops for certain trips, need to filter routes in the 1st view by service id:

Processing RoutesController#index (for 127.0.0.1 at 2009-10-09 21:05:54) [GET]
  Parameters: {"transport_type"=>"bus"}
  Service Load (0.6ms)   SELECT * FROM `services` WHERE (services.start_date <= '2009-10-09' and services.end_date >= '2009-10-09' and services.friday = 1 )
  Service Load (0.9ms)   SELECT `services`.* FROM `services` inner join service_exceptions on service_exceptions.service_id = services.id WHERE (service_exceptions.date = '2009-10-09' and service_exceptions.exception_type = 1)
  Service Columns (1.8ms)   SHOW FIELDS FROM `services`
  Service Load (0.7ms)   SELECT `services`.* FROM `services` inner join service_exceptions on service_exceptions.service_id = services.id WHERE (service_exceptions.date = '2009-10-09' and service_exceptions.exception_type = 2)
  SQL (417.4ms)   select case when routes.short_name = ' ' then 'Other' else routes.short_name end route_short_name, trips.headsign from routes inner join trips on trips.route_id = routes.id where routes.route_type in (3) and trips.service_id in (13,15,21,27,33,50,52,58,64,70,87,114,132,140,148,158,159,162,169,170) group by routes.short_name, trips.headsign
Completed in 462ms (View: 1, DB: 424) | 200 OK [http://localhost/routes?transport_type=bus]


This error is still arising:

Processing TripsController#index (for 127.0.0.1 at 2009-10-09 21:07:10) [GET]
  Parameters: {"headsign"=>"Kenmore Station via Ruggles Station ", " Longwood"=>nil, "date"=>"20091009", "route_short_name"=>"8"}
  Route Load (0.8ms)   SELECT * FROM `routes` WHERE (`routes`.`short_name` = '8')
  Route Columns (20.3ms)   SHOW FIELDS FROM `routes`
  Service Load (0.5ms)   SELECT * FROM `services` WHERE (services.start_date <= '2009-10-09' and services.end_date >= '2009-10-09' and services.friday = 1 )
  Service Load (0.5ms)   SELECT `services`.* FROM `services` inner join service_exceptions on service_exceptions.service_id = services.id WHERE (service_exceptions.date = '2009-10-09' and service_exceptions.exception_type = 1)
  Service Columns (1.9ms)   SHOW FIELDS FROM `services`
  Service Load (0.7ms)   SELECT `services`.* FROM `services` inner join service_exceptions on service_exceptions.service_id = services.id WHERE (service_exceptions.date = '2009-10-09' and service_exceptions.exception_type = 2)
  Trip Load (1.7ms)   SELECT * FROM `trips` WHERE (route_id in (20,21,22,24) and headsign = 'Kenmore Station via Ruggles Station ' and service_id in (13,15,21,27,33,50,52,58,64,70,87,114,132,140,148,158,159,162,169,170)) ORDER BY start_time asc
  Stop Load (1.0ms)   SELECT stops.*, count(*) as num_stoppings FROM `stops` INNER JOIN `stoppings` ON stoppings.stop_id = stops.id WHERE (stoppings.trip_id in (NULL)) GROUP BY stoppings.stop_id

RuntimeError (No stops for params: {:route_id=>[20, 21, 22, 24], :date=>"20091009", :headsign=>"Kenmore Station via Ruggles Station "}):
  app/models/trip.rb:20:in `for'
  app/controllers/trips_controller.rb:14:in `index'
  haml (2.2.3) [v] rails/./lib/sass/plugin/rails.rb:19:in `process'


Eureka! The problem was not escaping ampersands in the headsigns!

This points to doing the right thing, which is to make headsign a 1st class
model with a table, and changing the field on trip into a foreign key.

On the other hand, the easiest solution is to figure out how to substitute
a character for the ampersand.

The buses under the unnamed route short name have no trips. Delete!

--------------------------------------------------------------------------------
Sat Oct 10 07:16:02 EDT 2009

Now trying to get the arrivals at a stop to show. Once a stop disclosure button is
selected, we need to push in a table view that shows the arrivals through the
stop.

The logic can be a simple loop. The TripsMapViewController hands off all the
information it has to the StopViewController.

The StopViewController then loops through the trips and finds all the arrival
times

Example of the data format of trips:

{"trips":[{"start_time":"18:30:00","end_time":"18:54:00","stoppings":[{"position":1,"stop_id":1304,"arrival_time":"18:30:00"},{"position":2,"stop_id":1164,"arrival_time":"18:31:00"},{"position":3,"stop_id":1165,"arrival_time":"18:32:00"},{"position":4,"stop_id":1166,"arrival_time":"18:33:00"},{"position":5,"stop_id":1167,"arrival_time":"18:33:00"},{"position":6,"stop_id":1169,"arrival_time":"18:33:00"},{"position":7,"stop_id":1170,"arrival_time":"18:34:00"},{"position":8,"stop_id":1172,"arrival_time":"18:35:00"},{"position":9,"stop_id":1175,"arrival_time":"18:36:00"},{"position":10,"stop_id":1176,"arrival_time":"18:37:00"},{"position":11,"stop_id":1178,"arrival_time":"18:38:00"},{"position":12,"stop_id":1180,"arrival_time":"18:39:00"},{"position":13,"stop_id":1181,"arrival_time":"18:40:00"},{"position":14,"stop_id":1183,"arrival_time":"18:40:00"},{"position":15,"stop_id":1185,"arrival_time":"18:41:00"},{"position":16,"stop_id":1186,"arrival_time":"18:42:00"},{"position":17,"stop_id":3264,"arrival_time":"18:43:00"},{"position":18,"stop_id":3274,"arrival_time":"18:43:00"},{"position":19,"stop_id":3284,"arrival_time":"18:44:00"},{"position":20,"stop_id":3295,"arrival_time":"18:45:00"},{"position":21,"stop_id":8282,"arrival_time":"18:46:00"},{"position":22,"stop_id":1188,"arrival_time":"18:47:00"},{"position":23,"stop_id":1191,"arrival_time":"18:48:00"},{"position":24,"stop_id":1193,"arrival_time":"18:49:00"},{"position":25,"stop_id":1196,"arrival_time":"18:50:00"},{"position":26,"stop_id":1200,"arrival_time":"18:50:00"},{"position":27,"stop_id":359,"arrival_time":"18:51:00"},{"position":28,"stop_id":395,"arrival_time":"18:51:00"},{"position":29,"stop_id":396,"arrival_time":"18:52:00"},{"position":30,"stop_id":397,"arrival_time":"18:52:00"},{"position":31,"stop_id":398,"arrival_time":"18:53:00"},{"position":32,"stop_id":295,"arrival_time":"18:54:00"}]}],"region":{"center_lng":-71.0923,"lat_span":0.0691249999999854,"lng_span":0.0182500000000019,"center_lat":42.29545},"stops":{"1193":{"lat":42.3099,"lng":-71.0919,"num_stoppings":"1","name":"Seaver St @ Humboldt Ave"},"1188":{"lat":42.3068,"lng":-71.0872,"num_stoppings":"1","name":"Seaver St @ Maple St"},"1166":{"lat":42.273,"lng":-71.0934,"num_stoppings":"1","name":"Blue Hill Ave opp Woodhaven St"},"396":{"lat":42.3195,"lng":-71.0982,"num_stoppings":"1","name":"Columbus Ave @ Dimock St"},"3295":{"lat":42.3033,"lng":-71.085,"num_stoppings":"1","name":"Blue Hill Ave @ Ellington St"},"3284":{"lat":42.3005,"lng":-71.0859,"num_stoppings":"1","name":"Blue Hill Ave @ Charlotte St"},"1304":{"lat":42.2678,"lng":-71.0922,"num_stoppings":"1","name":"Mattapan Station"},"1183":{"lat":42.2913,"lng":-71.0889,"num_stoppings":"1","name":"Blue Hill Ave @ Westview St"},"1172":{"lat":42.28,"lng":-71.0926,"num_stoppings":"1","name":"Blue Hill Ave @ Evelyn St"},"1200":{"lat":42.3135,"lng":-71.0951,"num_stoppings":"1","name":"Columbus Ave @ Walnut Ave"},"1178":{"lat":42.2855,"lng":-71.0908,"num_stoppings":"1","name":"Blue Hill Ave @ Woodrow Ave"},"1167":{"lat":42.2749,"lng":-71.0933,"num_stoppings":"1","name":"1458 Blue Hill Ave opp Almont St"},"397":{"lat":42.3205,"lng":-71.0982,"num_stoppings":"1","name":"Columbus Ave @ Academy Rd"},"3274":{"lat":42.2986,"lng":-71.0866,"num_stoppings":"1","name":"Blue Hill Ave @ Wales St"},"359":{"lat":42.3154,"lng":-71.0978,"num_stoppings":"1","name":"1990 Columbus Ave"},"398":{"lat":42.3223,"lng":-71.0983,"num_stoppings":"1","name":"Columbus Ave @ Ritchie St"},"3264":{"lat":42.2968,"lng":-71.0871,"num_stoppings":"1","name":"Blue Hill Ave @ Vesta St"},"1196":{"lat":42.3121,"lng":-71.0933,"num_stoppings":"1","name":"Seaver St @ Harold St"},"1185":{"lat":42.2929,"lng":-71.0884,"num_stoppings":"1","name":"Blue Hill Ave opp Health Ctr"},"1191":{"lat":42.3076,"lng":-71.0888,"num_stoppings":"1","name":"Seaver St @ Elm Hill Ave"},"1180":{"lat":42.288,"lng":-71.09,"num_stoppings":"1","name":"Blue Hill Ave @ Arbutus St"},"1169":{"lat":42.276,"lng":-71.0933,"num_stoppings":"1","name":"Blue Hill Ave @ Norfolk St"},"1186":{"lat":42.2946,"lng":-71.0878,"num_stoppings":"1","name":"Blue Hill Ave @ Talbot Ave"},"1175":{"lat":42.2823,"lng":-71.0919,"num_stoppings":"1","name":"Blue Hill Ave @ Woolson St"},"1164":{"lat":42.2688,"lng":-71.0935,"num_stoppings":"1","name":"1624 Blue Hill Ave @ Mattapan Sq"},"295":{"lat":42.3231,"lng":-71.0996,"num_stoppings":"1","name":"Jackson Sq Station @ Orange Line"},"1181":{"lat":42.2896,"lng":-71.0894,"num_stoppings":"1","name":"Blue Hill Ave @ Callender St"},"1170":{"lat":42.2784,"lng":-71.0931,"num_stoppings":"1","name":"Blue Hill Ave @ Wilmore St"},"8282":{"lat":42.3056,"lng":-71.0853,"num_stoppings":"1","name":"Seaver St @ Blue Hill Ave"},"1176":{"lat":42.2841,"lng":-71.0913,"num_stoppings":"1","name":"Blue Hill Ave @ Morton St"},"1165":{"lat":42.2703,"lng":-71.0935,"num_stoppings":"1","name":"Blue Hill Ave @ Babson St"},"395":{"lat":42.3173,"lng":-71.0981,"num_stoppings":"1","name":"Columbus Ave @ Bray St"}}}

Use the stop id. Add it to the Annotation object.

Adding next arrival for each stop makes the response too big and slow, over 8 seconds. But it's fast if the trips map view only loads the next three trips. Example response

curl "http://localhost:3000/trips?date=20091009&route_short_name=1&headsign=Dudley+Station+via+Mass.+Ave."

{"trips":[{"start_time":"07:27:00","end_time":"08:02:00","stoppings":[{"position":1,"stop_id":201,"arrival_time":"07:27:00"},{"position":2,"stop_id":1569,"arrival_time":"07:28:00"},{"position":3,"stop_id":1567,"arrival_time":"07:29:00"},{"position":4,"stop_id":1568,"arrival_time":"07:30:00"},{"position":5,"stop_id":5841,"arrival_time":"07:30:00"},{"position":6,"stop_id":5929,"arrival_time":"07:31:00"},{"position":7,"stop_id":6012,"arrival_time":"07:32:00"},{"position":8,"stop_id":6064,"arrival_time":"07:33:00"},{"position":9,"stop_id":6091,"arrival_time":"07:33:00"},{"position":10,"stop_id":6353,"arrival_time":"07:34:

...
"Massachusetts Ave @ Huntington Ave","next_arrivals":["07:27:00","07:28:00","07:29:00"]},"6778":{"lat":42.3574,"lng":-71.0929,"num_stoppings":"2","name":"Massachusetts Ave @ Memorial Dr","next_arrivals":["07:27:00","07:28:00","07:29:00"]},"5656":{"lat":42.331,"lng":-71.0829,"num_stoppings":"2","name":"Washington St @ Ruggles St","next_arrivals":["07:27:00","07:28:00","07:29:00"]},"6861":{"lat":42.3509,"lng":-71.0896,"num_stoppings":"2","name":"Massachusetts Ave @ Beacon St","next_arrivals":["07:27:00","07:28:00","07:29:00"]},"6091":{"lat":42.3672,"lng":-71.1068,"num_stoppings":"2","name":"Massachusetts Ave @ Sellers St","next_arrivals":["07:27:00","07:28:00","07:29:00"]},"7164":{"lat":42.3427,"lng":-71.0851,"num_stoppings":"2","name":"Massachusetts Ave @ Westland Ave","next_arrivals":["07:27:00","07:28:00","07:29:00"]},"6

It works. Next arrival times showing. Now I just need to format them.

--------------------------------------------------------------------------------
Ran into this bug however, reported by someone else:

OK – I got a reply from Apple Support and they acknowledge this is a bug that
they are investigating. They offered the following:

The problem is related to the animation which drops the pins. The simplest
workaround would be to disable the pin drop (setAnimatesDrop:NO), but that
might be unsatisfying. A more complicated workaround would be to add
annotations in an animated fashion and then on last add remove them all and
re-add them in a non-animated fashion. This last non-animated add will ensure
they are properly sorted.

I took the latter approach, however I find that I need to do (e.g. add a delay)
to get it to work:

Not sure I like the hard coded 1sec value (I bet that doesn’t work on a 3GS) –
I wonder if someone has a better suggestion?

--------------------------------------------------------------------------------
Next problem: find the stops at which the bus just left

Algorithm:

Loop through the trips. For each trip, loop through the stops until one comes to
a stop whose arrival_time has not passed. Then the previous stop is the stop the
bus just left. Collect all these stops.

Or do imminent stops.

Q: Do I really need to send the trips data to the TripsMapViewController? Sufficient to send
just the stop data.

Now the data include imminent stop_ids

{"imminent_stop_ids":[5725,5399,7150,6518,5841,201,201,201,201,201],"trips":[{"start_time":"07:59:00","end_time":"08:37:00","stoppings":[{"position":1,"stop_id":201,"arrival_time":"07:59:00"},{"position":2,"stop_id":1569,"arrival_time":"08:00:00"},{"position":3,"stop_id":1567,"arrival_time":"08:01:00"},{"position":4,"stop_id":1568,"arrival_time":"08:02:00"},{"position":5,"stop_id":5841,"arrival_time":"08:03:00"},{"position":6,"stop_id":5929,"arrival_time":"08:04:00"},{"position":7,"stop_id":6012,"arrival_time":"08:05:00"},{"position":8,"stop_id":6064,"arrival_time":"08:06:00"},{"position":9,"stop_id":6091,"arrival_tim

Why the repeats? In any case, I eliminate the dups with #uniq.

Got the pins and callouts for next arrival times working.

--------------------------------------------------------------------------------
NEXT: tap a callout, see the next N arrivals and trips at a stop for the day.

We can remove self.trips from TripsMapViewController

e.g.  self.trips = [data objectForKey:@"trips"];

This is never accessed or used.

Instead, we can load this trips data more economically on the next page, when a
user taps a stop to get all arrival times.

Then we can load all the trips?

But won't the same trips this apply to all stops? Yes, but it doesn't matter.
We'll have to load the trips at some point, and a user is unlikely to need to
see the arrival times at more than one stop. Also, the server can format things
more conveniently to make an array of hashes specifically for a certain stop.

Each hash contains the arrival time, and the corresponding trip. Tap this cell,
and the next view controller takes this trip data and shows all the stops.

The stops need only be this stop and the ones subsequent. No need to show the
stops before.

Q: how far forward do we show arrival times? We can show the next 5 or so, and
the user can request more by tapping the last row. This sends a request to the
server that tells it the last trip_id that it has, and the server will look for
5 more trips after this id?

So:

1. remove the trips data from the server action that feeds
TripsMapViewController

2. prepare a controller that feeds data to the next view,
StopArrivalsViewController in the format described above.

3. When a user taps one of the arrivals, push in a view controller that shows
all the subsequent stops on that trip.

Another alternative. Keep the data fed to StopArrivalsVC small. 
Just enough to fill out the table.

When an arrival/trip is selected, then call the server and get all the stops 
for that trip and display them.

This is better and more efficient.

Another thing to do: when making the table view controllers for these views,
use a standard ViewController so we can put a box with instructions at the
bottom. Instructions are important for an app like this.

--------------------------------------------------------------------------------
Sat Oct 10 14:07:09 EDT 2009

Starbucks Kendall.

Reorganization and workflow streamling. I put the iPhone XCode project and the
Rails project under a single git repository. I reorganized my folder structure
to suit and also refined my .gitignore file so I don't see clutter when I call
'git status'. 

These little things are important.

Doing step number to. Preparing a Rails controller to feed the StopArrivalsVC
the necessary data. 

Input parameters

- stop_id
- route_short_name
- headsign
- date 

put this on the Stop model, as instance method

Test with:

"1569":{"next_arrivals":["26:37p9pm","27:01pm"],"lat":42.3751,"lng":-71.1185,"name":"Massachusetts Ave @ Johnston Gate","num_stoppings":"10"}

stop = Stop.find(1569)
stop.arrivals(:route_short_name => "1", :headsign => "Dudley Station via Mass. Ave.")

Seems to be working! See below.

I should version this NOTES file so I can track changes along with the commits. 

>> stop = Stop.find(1569)
=> #<Stop id: 1569, mbta_id: "2168", name: "Massachusetts Ave @ Johnston Gate", lat: 42.3751, lng: -71.1185>

>> stop.arrivals(:route_short_name => "1", :headsign => "Dudley Station via Mass. Ave.")   <----- THIS IS THE IMPORTANT METHOD

=> [#<Stopping id: 5248021, trip_id: 766, stop_id: 1569, arrival_time: "2000-01-01 14:05:00", position: 2, departure_time: "2000-01-01 14:05:00">, #<Stopping id: 5248056, trip_id: 767, stop_id: 1569, arrival_time: "2000-01-01 14:14:00", position: 2, departure_time: "2000-01-01 14:14:00">, #<Stopping id: 5248091, trip_id: 768, stop_id: 1569, arrival_time: "2000-01-01 14:23:00", position: 2, departure_time: "2000-01-01 14:23:00">, #<Stopping id: 5248126, trip_id: 769, stop_id: 1569, arrival_time: "2000-01-01 14:32:00", position: 2, departure_time: "2000-01-01 14:32:00">, ... ]
>> stop.arrivals(:route_short_name => "1", :headsign => "Dudley Station via Mass. Ave.").count
=> 56

Now making a controller to wrap this model layer method.

I'm going to remove the trips data from the Trips index rails action because we don't use it.

--------------------------------------------------------------------------------
Next is making a view controller for the stop arrivals. A subclass of
UIViewController with a table on it.


Sat Oct 10 15:25:11 EDT 2009

Got the StopArrivalsViewController calling Rails to get the arrival data for a
particular stop. The next step is to display this data on the table. 

The next step is to fill out this view. Then finally, construct the next view,
which shows all the stops remaining on a trip corresponding to an arrival.

If I finish this much this late afternoon, I can take a nice break happy with
the progress made.

2009-10-10 15:23:20.188 OpenMBTA[6689:20b] would call API with URL: http://localhost:3000/stop_arrivals?stop_id=6518&route_short_name=1&headsign=Dudley Station via Mass. Ave.
2009-10-10 15:23:20.279 OpenMBTA[6689:20b] loaded routes: (
        {
        "arrival_time" = "15:01:00";
        "trip_id" = 771;
    },
        {
        "arrival_time" = "15:10:00";
        "trip_id" = 688;
    },
        {
        "arrival_time" = "15:20:00";
        "trip_id" = 689;
    },


Got times to show up in the table. The next stop is to format the time, and
then to arm the cell so that selecting it pushes in a new view with all the
trip stops.

This will complete the scaffolding of the iPhone app. The rest is refinement.

I may need to buy a new server account from Linode. But maybe not.

Next step is to build the TripViewController. Another table view controller that
shows the remaining stops on a particular trip.

Tomorrow I can work on custom table cells. And exploring how the Commuter Rail and
Subway sections work.

--------------------------------------------------------------------------------
21:06 Saturday night

Finished wiring up TripViewController. Now the rest seems to be refining the
look. And then making sure that subway and commuter rail work. Tomorrow will be
devoted to this.

Monday I can start working on my RubyCocoa app!

Need to implement bookmarks and T feed

Maybe the best way is to proxy the T-alert through the API server so it can be 
formatted as JSON and so that it is future-proofed against T-alert feed 
spec changes.

I might also put in a hook to show a pop up alert if there's a T-alert for a
particular line.



Repeated from above:

--------------------------------------------------------------------------------
T alert RSS feed IDS

Hi, folks,
We know there is still work to be done on our end to make the T-Alerts
RSS feed as helpful as possible to developers and other users.  We are
working to improve the consistency of the information and to
streamline the XML feed to make it machine-readable.

In the meantime, we have developed two ID files that describe the
piece of infrastructure affected by each Alert (Green Line, #1 Bus,
Ashmont Elevator on Eastbound Platform, etc.).  The ID files will be
posted later today in a ZIP on the Developers Page, immediately below
the "T Alerts" link.  (I've provided the rapid-transit and commuter-
rail IDs below, for those who can't wait!)

You can access Alerts for each individual piece of infrastructure by
attaching "?(###)" at the end of the full feed string (http://
talerts.com/rssfeed/alertsrss.aspx).

For example,

http://talerts.com/rssfeed/alertsrss.aspx?17 will feed Green Line
Alerts.
http://talerts.com/rssfeed/alertsrss.aspx?58 will feed #1 Bus Alerts.
http://talerts.com/rssfeed/alertsrss.aspx?HP46 will feed Ashmont
Elevator EB Platform Alerts.

Is this information helpful to those working on integrating T-Alerts
into applications?

Best,
Chris from EOT

Fairmount       1
Fitchburg/South Acton   2
Framingham/Worcester    4
Franklin/Forge Park     5
Haverhill       7
Lowell  8
Middleborough/Lakeville 9
Needham 10
Newburyport/Rockport    11
Kingston/Plymouth       12
Providence/Stoughton    14
Red Line        15
Orange Line     16
Green Line      17
Blue Line       18
Washington Street       19
SL1: Airport Terminal - South Station   20
SL2: Boston Marine Industrial Park - South Station      28
SL3: City Point - South Station via Boston Marine Industrial Park       29
All Lines/Routes        99
Silver Line Washington St.    Dudley Station - Downtown via Washington
Street  53
Mattapan Trolley Shuttle Bus    Mattapan Sta. - Ashmont Sta.    57
Greenbush        232
Red Line - Mattapan Line        233 

--------------------------------------------------------------------------------
Sun Oct 11 10:40:59 EDT 2009

Got a copy of the RSS 2 feed for the T-Alerts. Ready to write Ruby code to
analyze this. Then I'll write the iPhone UITableView to show the recent alerts.

The question is how to cache this T-Alert data. Maybe the same way I cache it at
kindlefeeder.com

Next do favorites.

Then start polishing the app.

The TripViewController should not be a table but a map. Maybe make the
TripsMapView controller a subclass of a more generic Map pin displaying
controller.

Need modal help screens on each view.

Mark the last stop(s) with a green pin?

Added this to the response of /trips:

  "first_stop":["Massachusetts Ave @ Holyoke St - Holyoke Gate"]}

Now coloring the first stop green.

Next: 

Don't need to say "x more stops" on StopArrivals

Just let the disclosure tap bring up the Map view with the times for that trip

Need to show number of remaining trips per headsign on the Routes table view, 
because some headsigns only serve 3 trips. And some headsigns are not available
for certain days, like weekend days.

On views, put the information box on the bottom, to balance out the nav header
bar.

Trying to get subway trips, but this is bringing up no trips:

SELECT * FROM `trips` WHERE (route_id in (NULL) and headsign = 'Mattapan' and service_id in (17,23,29,54,60,66,72,89,96,101,108,116,134,142,150,157,161,168,172) and end_time > '12:48:30') ORDER BY start_time asc LIMIT 10

Try this:

select * from trips where headsign = 'Mattapan';

The problem is that there is a route id but no route_short_name.

Example:

mysql> select * from trips where headsign = 'Mattapan' limit 2\G
*************************** 1. row ***************************
                id: 97639
           mbta_id: 11687656-LRV409-hlm49011-Weekday-03
          route_id: 1007
        service_id: 114
          headsign: Mattapan
        start_time: 05:16:00
          end_time: 05:25:00
        first_stop: Ashmont Station - Westbound
         last_stop: Mattapan Station - Westbound
         num_stops: 8
        route_type: 0
service_start_date: 2009-09-08
  service_end_date: 2009-12-24
  route_short_name:
     schedule_type: weekday

These trips all have the same route_id:

mysql> select headsign, num_stops, first_stop, route_id last_stop from trips where headsign = 'Mattapan' limit 200;
+----------+-----------+-----------------------------+-----------+
| headsign | num_stops | first_stop                  | last_stop |
+----------+-----------+-----------------------------+-----------+
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
| Mattapan |         8 | Ashmont Station - Westbound |      1007 |
|

But NOT the same service id.
114 and 115 for Mattapan


I think I need to change the way the routes data is structured so that route_ids are passed:

hellenic ~/MBTA/rails: curl "http://localhost:3000/routes?transport_type=Subway"
[{"route_short_name":"Other","headsigns":["Alewife","Ashmont","B - Boston College","Bowdoin","Braintree","C - Cleveland Circle","D - Riverside","E - Heath Street","Forest Hills","Government Center","Lechmere","Mattapan","North Station","Oak Grove","Wonderland"]}]

OR I can treat subway and commuter rail differently from bus.

Now subway and commuter rails return these data structures:

curl 'http://localhost:3000/routes?transport_type=Commuter%20Rail'
[{"route_short_name":"Commuter Rail Lines","headsigns":["Fairmount","Fitchburg","Franklin","Greenbush","Haverhill","Lowell","Needham","Newburyport","OldColony","Providence","Worcester"]}]hellenic ~/MBTA/rails:

Boat doesn't quite work with this structure.


Boats:

+--------------------------------+
| mbta_id                        |
+--------------------------------+
| Boat-F1-IB-600AM-FallWeekday   |
| Boat-F1-IB-630AM-FallWeekday   |
| Boat-F1-IB-650AM-FallWeekday   |
| Boat-F1-IB-715AM-FallWeekday   |
| Boat-F1-IB-745AM-FallWeekday   |
| Boat-F1-IB-800AM-FallWeekday   |
| Boat-F1-IB-820AM-FallWeekday   |
| Boat-F1-IB-845AM-FallWeekday   |
| Boat-F1-IB-915AM-FallWeekday   |
| Boat-F1-IB-1100AM-FallWeekday  |
| Boat-F1-IB-230PM-FallWeekday   |
| Boat-F1-IB-410PM-FallWeekday   |
| Boat-F1-IB-445PM-FallWeekday   |
| Boat-F1-IB-500PM-FallWeekday   |
| Boat-F1-IB-540PM-FallWeekday   |
| Boat-F1-IB-610PM-FallWeekday   |
| Boat-F1-IB-640PM-FallWeekday   |
| Boat-F1-IB-740PM-FallWeekday   |
| Boat-F1-OB-650AM-FallWeekday   |
| Boat-F1-OB-710AM-FallWeekday   |
|

It goes from F1 to F4.


mysql> select headsign, mbta_id, service_id, route_id from trips where route_type in (0,1) group by route_id, headsign;
+----------------------+--------------------------------------------+------------+----------+
| headsign             | mbta_id                                    | service_id | route_id |
+----------------------+--------------------------------------------+------------+----------+
| B - Boston College   | 11671870-LRV409-hlb49016-Saturday-03       |         88 |      957 |
| Lechmere             | 11671869-LRV409-hlb49016-Saturday-03       |         88 |      957 |
| B - Boston College   | 11669134-LRV409-hlb49011-Weekday-03        |         87 |      959 |
| North Station        | 11669178-LRV409-hlb49011-Weekday-03        |         87 |      959 |
| B - Boston College   | 11669099-LRV409-hlb49011-Weekday-03        |         87 |      961 |
| Government Center    | 11669098-LRV409-hlb49011-Weekday-03        |         87 |      961 |
| Government Center    | 11669116-LRV409-hlb49011-Weekday-03        |         87 |      963 |
| C - Cleveland Circle | 11669454-LRV409-hlb49011-Weekday-03        |         87 |      965 |
| Lechmere             | 11669390-LRV409-hlb49011-Weekday-03        |         87 |      965 |
| C - Cleveland Circle | 11669456-LRV409-hlb49011-Weekday-03        |         87 |      967 |
| North Station        | 11669391-LRV409-hlb49011-Weekday-03        |         87 |      967 |
| D - Riverside        | 11669436-LRV409-hlb49011-Weekday-03        |         87 |      978 |
| Government Center    | 11669001-LRV409-hlb49011-Weekday-03        |         87 |      978 |
| E - Heath Street     | 11669416-LRV409-hlb49011-Weekday-03        |         87 |      992 |
| Lechmere             | 11669417-LRV409-hlb49011-Weekday-03        |         87 |      992 |
| E - Heath Street     | 11669593-LRV409-hlb49011-Weekday-03        |         87 |      994 |
| North Station        | 11669803-LRV409-hlb49011-Weekday-03        |         87 |      994 |
| Ashmont              | 11687655-LRV409-hlm49011-Weekday-03        |        114 |     1007 |
| Mattapan             | 11687656-LRV409-hlm49011-Weekday-03        |        114 |     1007 |
| Forest Hills         | 11714206-RTL409-hmo49011-Weekday-03        |        140 |     1011 |
| Oak Grove            | 11714207-RTL409-hmo49011-Weekday-03        |        140 |     1011 |
| Forest Hills         | 11714228-RTL409-hmo49011-Weekday-03        |        140 |     1017 |
| Alewife              | 11718069-RTL409-hms49011-Weekday-03        |        148 |     1027 |
| Ashmont              | 11718071-RTL409-hms49011-Weekday-03        |        148 |     1027 |
| Alewife              | 11722021-RTL409-hms49011-Weekday-03        |        148 |     1033 |
| Braintree            | 11722022-RTL409-hms49011-Weekday-03        |        148 |     1033 |
| Bowdoin              | 11695196-RTL409-hmb49011-Weekday-03        |        132 |     1039 |
| Wonderland           | 11695197-RTL409-hmb49011-Weekday-03        |        132 |     1039 |
| Bowdoin              | 11711837-RTL409-hmb49011-Weekday-03        |        132 |     1041 |
| Bowdoin              | BlueGC-11384088-RTL309-hmb39011-Weekday-03 |        170 |     1083 |
| Wonderland           | BlueGC-11384102-RTL309-hmb39011-Weekday-03 |        170 |     1083 |
+----------------------+--------------------------------------------+------------+----------+
31 rows in set (0.14 sec)

See that unique headsigns are a problem. See Lechmere is shared between the
green lines.


Need to distinguish between inbound and outbound trips on commuter rail.

Need to redesign the architecture to be more reusable and modular.

Need to formalize the parameters need to generate routes for each transport
type. This is on the Rails side.

Instead of having case statements and if else control branching in the classes
and controller actions, I should treat each transport case as distinct.

Use subclassing.

The same applies for the iPhone controllers. Have a parent class, and then
subclasses for each transport type?


TripsMapVC can be shared. Maybe only RoutesViewController needs different
subclasses for the route types.


On the rails side, Trip.for() needs to be different for each transport type.
We can hide the differences withing this method for a transport_type param
that causes it to delegate.

But the method must return a common data format.


Focus 1st on the problem of generating the Routes menu for CR, Subway, and Boat.

Commuter Rail is the most important. Group under the mbta_id, and show the trips under that.

select mbta_id from routes where route_type = 2 order by mbta_id asc

mysql> select routes.mbta_id, trips.headsign from routes inner join trips on routes.id = trips.route_id where trips.route_type = 2 group by trips.headsign order by mbta_id asc;
+----------------+----------------------------------------+
| mbta_id        | headsign                               |
+----------------+----------------------------------------+
| CR-Fairmount   | Readville (Train 743)                  |
| CR-Fairmount   | Readville (Train 745)                  |
| CR-Fairmount   | Readville (Train 747)                  |
| CR-Fairmount   | Readville (Train 749)                  |
| CR-Fairmount   | Readville (Train 753)                  |
| CR-Fairmount   | Readville (Train 755)                  |
| CR-Fairmount   | Readville (Train 757)                  |
| CR-Fairmount   | Readville (Train 759)                  |
| CR-Fairmount   | Readville (Train 761)                  |
| CR-Fairmount   | Readville (Train 763)                  |
| CR-Fairmount   | Readville (Train 765)                  |
| CR-Fairmount   | Readville (Train 767)                  |
| CR-Fairmount   | Readville (Train 769)                  |
| CR-Fairmount   | Readville (Train 771)                  |
| CR-Fairmount   | South Station (Train 744)              |
| CR-Fairmount   | South Station (Train 746)              |
| CR-Fairmount   | South Station (Train 748)              |
| CR-Fairmount   | South Station (Train 750)              |
|

select routes.mbta_id, trips.headsign, group_concat(trips.mbta_id) from routes inner join trips on routes.id = trips.route_id where trips.route_type = 2 group by trips.headsign order by mbta_id asc;


mysql> select routes.mbta_id, trips.headsign, group_concat(trips.mbta_id) from routes inner join trips on routes.id = trips.route_id where trips.route_type = 2 group by trips.headsign order by mbta_id asc;
+----------------+----------------------------------------+-----------------------------------------------------------+
| mbta_id        | headsign                               | group_concat(trips.mbta_id)                               |
+----------------+----------------------------------------+-----------------------------------------------------------+
| CR-Fairmount   | Readville (Train 743)                  | CR-Fairmount-CR-Weekday-743                               |
| CR-Fairmount   | Readville (Train 745)                  | CR-Fairmount-CR-Weekday-745                               |
| CR-Fairmount   | Readville (Train 747)                  | CR-Fairmount-CR-Weekday-747                               |
| CR-Fairmount   | Readville (Train 749)                  | CR-Fairmount-CR-Weekday-749                               |
| CR-Fairmount   | Readville (Train 753)                  | CR-Fairmount-CR-Weekday-753                               |
| CR-Fairmount   | Readville (Train 755)                  | CR-Fairmount-CR-Weekday-755                               |
| CR-Fairmount   | Readville (Train 757)                  | CR-Fairmount-CR-Weekday-757                               |
| CR-Fairmount   | Readville (Train 759)                  | CR-Fairmount-CR-Weekday-759                               |
| CR-Fairmount   | Readville (Train 761)                  | CR-Fairmount-CR-Weekday-761                               |
| CR-Fairmount   | Readville (Train 763)                  | CR-Fairmount-CR-Weekday-763                               |
| CR-Fairmount   | Readville (Train 765)                  | CR-Fairmount-CR-Weekday-765                               |
| CR-Fairmount   | Readville (Train 767)                  | CR-Fairmount-CR-Weekday-767                               |
| CR-Fairmount   | Readville (Train 769)                  | CR-Fairmount-CR-Weekday-769                               |
| CR-Fairmount   | Readville (Train 771)                  | CR-Fairmount-CR-Weekday-771                               |
| CR-Fairmount   | South Station (Train 744)              | CR-Fairmount-CR-Weekday-744                               |
| CR-Fairmount   | South Station (Train 746)              | CR-Fairmount-CR-Weekday-746                               |
| CR-Fairmount   | South Station (Train 748)              | CR-Fairmount-CR-Weekday-748                               |
|
...

| CR-Worcester   | South Station (Train P540)             | CR-Worcester-CR-Weekday-P540                              |
| CR-Worcester   | South Station (Train P550)             | CR-Worcester-CR-Saturday-P550                             |
| CR-Worcester   | South Station (Train P552)             | CR-Worcester-CR-Saturday-P552,CR-Worcester-CR-Sunday-P552 |
| CR-Worcester   | South Station (Train P554)             | CR-Worcester-CR-Saturday-P554,CR-Worcester-CR-Sunday-P554 |
| CR-Worcester   | South Station (Train P556)             | CR-Worcester-CR-Saturday-P556,CR-Worcester-CR-Sunday-P556 |
| CR-Worcester   | South Station (Train P558)             | CR-Worcester-CR-Saturday-P558,CR-Worcester-CR-Sunday-P558 |
| CR-Worcester   | South Station (Train P560)             | CR-Worcester-CR-Saturday-P560,CR-Worcester-CR-Sunday-P560 |
| CR-Worcester   | South Station (Train P562)             | CR-Worcester-CR-Saturday-P562,CR-Worcester-CR-Sunday-P562 |
| CR-Worcester   | South Station (Train P564)             | CR-Worcester-CR-Saturday-P564,CR-Worcester-CR-Sunday-P564 |
| CR-Worcester   | South Station (Train P566)             | CR-Worcester-CR-Saturday-P566,CR-Worcester-CR-Sunday-P566 |
| CR-Worcester   | Worcester / Union Station (Train P501) | CR-Worcester-CR-Weekday-P501                              |
| CR-Worcester   | Worcester / Union Station (Train P503) | CR-Worcester-CR-Weekday-P503                              |
| CR-Worcester   | Worcester / Union Station (Train P509) | CR-Worcester-CR-Weekday-P509                              |
| CR-Worcester   | Worcester / Union Station (Train P513) | CR-Worcester-CR-Weekday-P513                              |
| CR-Worcester   | Worcester / Union Station (Train P517) | CR-Worcester-CR-Weekday-P517                              |
| CR-Worcester   | Worcester / Union Station (Train P519) | CR-Worcester-CR-Weekday-P519                              |
| CR-Worcester   | Worcester / Union Station (Train P523) | CR-Worcester-CR-Weekday-P523                              |
| CR-Worcester   | Worcester / Union Station (Train P527) | CR-Worcester-CR-Weekday-P527                              |
| CR-Worcester   | Worcester / Union Station (Train P529) | CR-Worcester-CR-Weekday-P529                              |
| CR-Worcester   | Worcester / Union Station (Train P533) | CR-Worcester-CR-Weekday-P533                              |
| CR-Worcester   | Worcester / Union Station (Train P535) | CR-Worcester-CR-Weekday-P535                              |
| CR-Worcester   | Worcester / Union Station (Train P537) | CR-Worcester-CR-Weekday-P537                              |
| CR-Worcester   | Worcester / Union Station (Train P553) | CR-Worcester-CR-Saturday-P553,CR-Worcester-CR-Sunday-P553 |
| CR-Worcester   | Worcester / Union Station (Train P557) | CR-Worcester-CR-Saturday-P557,CR-Worcester-CR-Sunday-P557 |
| CR-Worcester   | Worcester / Union Station (Train P561) | CR-Worcester-CR-Saturday-P561,CR-Worcester-CR-Sunday-P561 |
| CR-Worcester   | Worcester / Union Station (Train P563) | CR-Worcester-CR-Saturday-P563,CR-Worcester-CR-Sunday-P563 |
| CR-Worcester   | Worcester / Union Station (Train P567) | CR-Worcester-CR-Sunday-P567,CR-Worcester-CR-Saturday-P567 |
+----------------+----------------------------------------+-----------------------------------------------------------+
816 rows in set (0.31 sec)




